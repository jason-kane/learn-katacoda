challenges:
- assignment: '# Downloading the Universal Base Image


    The Red Hat Universal Base Image (UBI) is produced by Red Hat and is an easy

    place to start when containerizing applications.  If you want to read more

    about the UBI program, or the three different flavors of UBI, check out the

    [FAQ - Universal Base Images](https://developers.redhat.com/articles/ubi-faq)

    for additional details.


    In this lab, you will be installing additional software into the container

    image, however that software runs as an interactive application.  So you will

    need `yum`, but do not need `systemd` for managing services within the

    container environment.  For that reason, you will be using the __Standard__

    UBI image (as opposed to the Minimal or Multi-service images).


    By executing the command below, your system will download the Standard UBI

    image from Red Hat''s registry.


    `buildah from registry.access.redhat.com/ubi8/ubi`{{execute T1}}


    <pre class="file">

    Getting image source signatures

    Copying blob 77c58f19bd6e done

    Copying blob 47db82df7f3f done

    Copying config a1f8c96997 done

    Writing manifest to image destination

    Storing signatures

    ubi-working-container

    </pre>


    From the output above, you can see that the image was successfully downloaded

    and a working container image was created and attached to the system with the

    name of __ubi-working-container__.  You will use this working container in the

    next steps to install additional software packages into the image.

    '
  difficulty: basic
  notes:
  - contents: '# Goal:

      After completing this scenario, users will be able to install additional

      software into a container image.


      # Concepts included in this scenario:

      * Downloading a Red Hat Universal Base Image (UBI)

      * Positioning or configuring a container to use 3rd party repositories

      * Install 3rd party software into the container image

      * Commit changes to create a new container image

      * Validate the containerized application


      # Example Usecase:

      You have a piece of software that you would like to deploy within a container

      image rather than installing it natively on the host system.  By using a

      container image, you can copy the entire environment for the software to

      several different hosts or run multiple copies of it on the same system.




      '
    type: text
  slug: step1
  tabs:
  - hostname: rhel
    title: Terminal
    type: terminal
  - hostname: rhel
    path: /
    port: 9090
    title: RHEL Web Console
    type: service
  timelimit: 60
  title: Step 1
  type: challenge
- assignment: "# Positioning yum Repository\n\nIn this lab, you are going to containerize\
    \ a software package that is already\npackaged in RPM format and stored in the\
    \ Extra Packages for Enterprise Linux\n(EPEL) repository.\n\nSoftware often has\
    \ requirements for prerequisite software that must be installed\non the machine\
    \ in order for it to work properly.  `yum` will resolve those\ndependencies for\
    \ you, as long as it is able to locate the required packages in\nrepositories\
    \ defined on the machine.  The Red Hat Universal Base Image (UBI)\ndownloaded\
    \ in the previous step has access to some Red Hat Enterprise Linux\nrepositories.\
    \  However, the target package for the lab is from EPEL.  In\nthis step you will\
    \ install the EPEL repository inside the container working\nimage.\n\nIn the command\
    \ below, `buildah` is going to run a command on the\n`ubi-working-container` image.\
    \  The `--` indicates that the command should be\nexecuted from within the container,\
    \ which means the results will be applied into\nthe container image.  Lastly,\
    \ you are providing the `yum` command to install a\npackage that defines all of\
    \ the repositories from EPEL, `epel-release-latest-8`.\n\n`buildah run ubi-working-container\
    \ -- yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm`{{execute\
    \ T1}}\n\n<pre class=\"file\">\n<<< OUTPUT ABRIDGED >>>\n\n==========================================================================================================================================\n\
    \ Package                            Architecture                 Version    \
    \                     Repository                          Size\n==========================================================================================================================================\n\
    Installing:\n epel-release                       noarch                      \
    \ 8-10.el8                         @commandline                        22 k\n\n\
    <<< OUTPUT ABRIDGED >>>\n\nInstalled:\n  epel-release-8-10.el8.noarch\n\nComplete!\n\
    </pre>\n\nFrom the above output, you can see that the epel-release RPM was installed\n\
    successfully inside the container.  You could verify this was not completed\n\
    on the host by looking for the RPM on the host system.\n\n`rpm -q epel-release`{{execute\
    \ T1}}\n\n<pre class=\"file\">\npackage epel-release is not installed\n</pre>\n\
    \nIf your repository configurations are not distributed as an RPM, but instead\
    \ as\nindividual `.repo` files, you could use the `buildah copy` command to copy\n\
    files from the host operating system into the container image.  You will see\n\
    an example of using `buildah copy` later in this lab.\n"
  difficulty: basic
  slug: step2
  tabs:
  - hostname: rhel
    title: Terminal
    type: terminal
  - hostname: rhel
    path: /
    port: 9090
    title: RHEL Web Console
    type: service
  timelimit: 60
  title: Step 2
  type: challenge
- assignment: "# Installing the target software\n\nNow that the yum repositories are\
    \ defined within the container, you can use\nanother `yum install`, executed within\
    \ the container, to install the target\nsoftware: `moon-buggy`.\n\n`buildah run\
    \ ubi-working-container -- yum -y install moon-buggy`{{execute T1}}\n\n<pre class=\"\
    file\">\n<<< OUTPUT ABRIDGED>>>\n\n==========================================================================================================================================\n\
    \ Package                    Architecture          Version                   \
    \        Repository                                       Size\n==========================================================================================================================================\n\
    Installing:\n moon-buggy                 x86_64                1.0.51-25.el8 \
    \                    epel                                             81 k\n\n\
    <<< OUTPUT ABRIDGED >>>\n\nInstalled:\n  lsa-lib-1.2.4-5.el8.x86_64     audiofile-1:0.3.6-23.el8.x86_64\n\
    \  esound-libs-1:0.2.41-22.el8.x86_64    flac-libs-1.3.2-9.el8.x86_64   \n  libogg-2:1.3.2-10.el8.x86_64\
    \    moon-buggy-1.0.51-25.el8.x86_64   \n\nComplete!\n</pre>\n\nFrom the above\
    \ output, you can see that `moon-buggy` was successfully installed\ninto the container.\
    \  The `yum` transaction also installed several required\npieces of software as\
    \ well.\n"
  difficulty: basic
  slug: step3
  tabs:
  - hostname: rhel
    title: Terminal
    type: terminal
  - hostname: rhel
    path: /
    port: 9090
    title: RHEL Web Console
    type: service
  timelimit: 60
  title: Step 3
  type: challenge
- assignment: '# Committing the new container image


    At this point, the container is configured.  It is time to transition from a

    working container into a committed image.  In the command below, you will use

    the `buildah` command to commit the working container to an image called:

    `moon-buggy`.


    `buildah commit ubi-working-container moon-buggy`{{execute T1}}


    <pre class="file">

    Getting image source signatures

    Copying blob 226bfaae015f skipped: already exists

    Copying blob 70056249a0e2 skipped: already exists

    Copying blob b03eece6d0e2 done

    Copying config dbb1368db3 done

    Writing manifest to image destination

    Storing signatures

    dbb1368db3f9b5f5cd651581e3c6e0bee242c25ef8ec68d2bef9f18e98f05209

    </pre>


    The above output shows that the commit was successful, however you can verify

    this by looking at the available container images on the system.


    `podman image list`{{execute T1}}


    <pre class="file">

    REPOSITORY                            TAG      IMAGE ID       CREATED          SIZE

    localhost/moon-buggy                  latest   dbb1368db3f9   15 seconds ago   335
    MB

    registry.access.redhat.com/ubi8/ubi   latest   a1f8c9699786   4 weeks ago      211
    MB


    <<< OUTPUT ABRIDGED >>>

    </pre>


    Notice in the output above that `moon-buggy` is the first container image

    listed in the `podman image list` output.

    '
  difficulty: basic
  slug: step4
  tabs:
  - hostname: rhel
    title: Terminal
    type: terminal
  - hostname: rhel
    path: /
    port: 9090
    title: RHEL Web Console
    type: service
  timelimit: 60
  title: Step 4
  type: challenge
- assignment: "# Running the new containerized software\n\nNow the software has been\
    \ installed and a new container image created.  It is\ntime to spawn a runtime\
    \ of the container image and validate the software.  The\nsoftware we are using\
    \ is a commandline command.  When you `run` the container,\nit will be in interactive\
    \ (`-it`) mode, based on the `moon-buggy` container\nimage, and the command run\
    \ interactively will be `/usr/bin/moon-buggy`.\n\n`podman run -it moon-buggy /usr/bin/moon-buggy`{{execute\
    \ T1}}\n\n<pre class=\"file\">\n<<< OUTPUT ABRIDGED >>>\n               MM   \
    \  MM   OOOOO    OOOOO   NN     N\n               M M   M M  O     O  O     O\
    \  N N    N\n               M  M M  M  O     O  O     O  N  N   N\n          \
    \     M   M   M  O     O  O     O  N   N  N\n               M       M  O     O\
    \  O     O  N    N N\n               M       M   OOOOO    OOOOO   N     NN\n\n\
    \                     BBBBBB   U     U   GGGGG    GGGGG   Y     Y\n          \
    \           B     B  U     U  G     G  G     G   Y   Y\n                     BBBBBB\
    \   U     U  G        G          Y Y\n                     B     B  U     U  G\
    \   GGG  G   GGG     Y\n                     B     B  U     U  G     G  G    \
    \ G    Y\n                     BBBBBB    UUUUU    GGGGG    GGGGG   YY\n\n<<< OUTPUT\
    \ ABRIDGED >>>\n</pre>\n\nYou can now play the Moon Buggy game, which is a text-based\
    \ version of the\npopular Moon Patrol.  When you are finished, use the `q` command\
    \ to quit the\ngame, which will terminate the container.\n\nAlternatively you\
    \ can use `podman` to kill the running container from \n**Terminal 2**.\n\n`podman\
    \ kill $(podman ps | grep -v CONTAINER | cut -f1 -d\" \" )`{{execute T2}}\n\n"
  difficulty: basic
  slug: step5
  tabs:
  - hostname: rhel
    title: Terminal
    type: terminal
  - hostname: rhel
    path: /
    port: 9090
    title: RHEL Web Console
    type: service
  timelimit: 60
  title: Step 5
  type: challenge
description: '# Goal:

  After completing this scenario, users will be able to install additional

  software into a container image.


  # Concepts included in this scenario:

  * Downloading a Red Hat Universal Base Image (UBI)

  * Positioning or configuring a container to use 3rd party repositories

  * Install 3rd party software into the container image

  * Commit changes to create a new container image

  * Validate the containerized application


  # Example Usecase:

  You have a piece of software that you would like to deploy within a container

  image rather than installing it natively on the host system.  By using a

  container image, you can copy the entire environment for the software to

  several different hosts or run multiple copies of it on the same system.




  '
developers:
- dopinto@redhat.com
icon: https://logodix.com/logo/1910931.png
level: beginner
owner: rhel
private: false
published: true
skipping_enabled: false
slug: containerize-app
tags:
- rhel
title: Build an application into a container image using RHEL Container Tools
type: track
