challenges:
- assignment: "# Install and enable required software\n\nBefore you start building\
    \ images with image builder, the software required to\nperform the tasks must\
    \ be installed on the system.  Specifically, the\n`composer-cli` package which\
    \ provides the `composer-cli` command, and the\n`osbuild-composer` package which\
    \ provides the back-end service used to produce\nthe virtual machine images.\n\
    \n```\nyum -y install composer-cli osbuild-composer\n```\n\n<pre class='file'>\n\
    <<< OUTPUT ABRIDGED >>>\n\n==========================================================================================================================================\n\
    \ Package                            Arch      Version                       \
    \                    Repository                           Size\n==========================================================================================================================================\n\
    Installing:\n composer-cli                  x86_64       28.14.58-1.el8      \
    \                              rhel-8-for-x86_64-appstream-rpms        86 k\n\
    \ osbuild-composer              x86_64       28.4-1.el8                      \
    \                  rhel-8-for-x86_64-appstream-rpms        19 k\nInstalling dependencies:\n\
    \ bubblewrap                    x86_64       0.4.0-1.el8                     \
    \                  rhel-8-for-x86_64-baseos-rpms           50 k\n fuse       \
    \                   x86_64       2.9.7-12.el8                                \
    \      rhel-8-for-x86_64-baseos-rpms           83 k\n\n<<< OUTPUT ABRIDGED >>>\n\
    \nComplete!\n</pre>\n\nNow that the software has been successfully installed on\
    \ the system, you also need to activate the `osbuild-composer` service so that\
    \ the `composer-cli`\ncommand can interact with the service that is responsible\
    \ for queuing and creating the machine images.\n\n```\nsystemctl enable --now\
    \ osbuild-composer.socket\n```\n\n<pre class='file'>\nCreated symlink /etc/systemd/system/multi-user.target.wants/osbuild-composer.socket\
    \ \u2192 /usr/lib/systemd/system/osbuild-composer.socket.\n</pre>\n\nNow that\
    \ the service is accessible, you are ready to start working with image builder\
    \ to create machine images.\n"
  difficulty: basic
  notes:
  - contents: "# Goal:\nAfter completing this scenario, users will be able to create\
      \ customized Red Hat Enterprise Linux images using the `composer-cli` command.\n\
      \n# Concepts included in this scenario:\n* Creating a custom blueprint to use\
      \ for machine image creation\n* Building a custom Red Hat Enterprise Linux machine\
      \ image\n* Monitoring the image build process\n* Validate the completed machine\
      \ image\n\n# Example Usecase:\nUsing the Image Builder commandline interface\
      \ to make system images would be a \nconsistent, repeatable, automatable way\
      \ to build the same machine images, but \noutput the image to different cloud\
      \ formats for use in a hybrid cloud \nenvironment.\n\n"
    type: text
  slug: step1
  tabs:
  - hostname: rhel
    title: Terminal
    type: terminal
  - hostname: rhel
    path: /
    port: 9090
    title: RHEL Web Console
    type: service
  timelimit: 60
  title: Step 1
  type: challenge
- assignment: "# Create a blueprint from a file\n\nIn this step, you will be creating\
    \ a new blueprint used to build a machine image and update it to include extra\
    \ packages.\n\nFirst, look at what blueprints are available on the system.\n\n\
    ```\ncomposer-cli blueprints list\n```\n\nThis system has no existing blueprints.\
    \ So, let us go ahead and create a blueprint.\n\nThe `composer-cli` will take\
    \ as input a TOML formatted file (Tom's Obvious Minimal Language)\nthat describes\
    \ the blueprint used to define our machine image.\n\nTo save  some time look at\
    \ the __node-app-server.toml__ file that has already been pre-created using a\
    \ tool \nlike `cat` or `less`.\n\n```\ncat node-app-server.toml\n```\n\n<pre class='file'>\n\
    name = \"node-app-server\"\ndescription = \"Sample image for the node.js application\
    \ server\"\nversion = \"0.0.1\"\nmodules = []\ngroups = []\n</pre>\n\nThe name\
    \ of the blueprint is called __node-app-server__. It is recommended that you also\
    \ include a description so that \nothers using this blueprint know what system\
    \ image they are building. At this point, the blueprint file does not have \n\
    any packages but we will add the `nodejs` and `nginx` packages to it. \n\n`nodejs`\
    \ is distributed as an application stream for Red Hat Enterprise Linux, so you\
    \ will need to add a __[[packages]]__\nsection to the node-app-server.toml file\
    \ adding `nodejs` to the build.\n\n```\nprintf '\\n[[packages]]\\nname = \"nodejs\"\
    \\nversion = \"*\"' >> node-app-server.toml\n```\n\nThe `printf` command appends\
    \ the following formatted stanza to the node-app-server.toml file.\n\n<pre class='file'>\n\
    [[modules]]\nname = \"nodejs\"\nversion = \"*\"\n</pre>\n\nSimilarly, add the\
    \ `nginx` package to the blueprint file.\n\n```\nprintf '\\n[[packages]]\\nname\
    \ = \"nginx\"\\nversion = \"*\"' >> node-app-server.toml\n```\n\nIn order to create\
    \ the blueprint from the local TOML file, we will use the `blueprints push` cli\
    \ option.\n\n```\ncomposer-cli blueprints push node-app-server.toml\n```\n\nTo\
    \ verify that your update has been made, review the log of changes made\nto the\
    \ node-app-server blueprint.\n\n```\ncomposer-cli blueprints changes node-app-server\n\
    ```\n\n<pre class='file'>\nnode-app-server\n    2020-07-13T23:07:57Z  e4284083bad43ded8a4a9ea2947a5f45be72f8c4\n\
    \    Recipe node-app-server, version 0.0.1 saved.\n</pre>\n\n\n>**Note:** in the\
    \ above command output, your date and time will be different\nthan the date and\
    \ time that appears in the example output.\n\nYou can also review the contents\
    \ of the node-app-server blueprint to verify\nthat the `nodejs` and `nginx` modules\
    \ are reflected in the active version of the\nblueprint instructions.\n\n```\n\
    composer-cli blueprints show node-app-server\n```\n\n<pre class='file'>\nname\
    \ = \"node-app-server\"\ndescription = \"Sample image for the node.js application\
    \ server\"\nversion = \"0.0.1\"\nmodules = []\ngroups = []\n\n[[packages]]\nname\
    \ = \"nodejs\"\nversion = \"*\"\n\n[[packages]]\nname = \"nginx\"\nversion = \"\
    *\"\n</pre>\n\nIn the above output, you can see that the `nodejs` and `nginx`\
    \ packages are now\nincluded in the node-app-server blueprint definition.\n"
  difficulty: basic
  slug: step2
  tabs:
  - hostname: rhel
    title: Terminal
    type: terminal
  - hostname: rhel
    path: /
    port: 9090
    title: RHEL Web Console
    type: service
  timelimit: 60
  title: Step 2
  type: challenge
- assignment: "# Building a machine image\n\nIn this step you will build a machine\
    \ image from the node-app-server blueprint \ndefinition you made in the previous\
    \ step.\n\nUse the `composer-cli` command to start a compose based on the\nnode-app-server\
    \ blueprint.  For this lab, you will use the output format\nof __qcow2__. However,\
    \ you could build any of the following types of images: \n\n| Output type    \
    \  |  Details                |\n|------------------|:-----------------------:|\n\
    | ami              |  Amazon EC2             |\n| openstack        |  OpenStack\
    \ image        |\n| qcow2            |  qcow2 image            |\n| rhel-edge-commit\
    \ |  RHEL edge image        |\n| tar              |  tar archive            |\n\
    | vhd              |  virtual hard disk      |\n| vmdk             |  Virtual\
    \ Machine disk   |\n\n\n```\ncomposer-cli compose start node-app-server qcow2\n\
    ```\n\n<pre class='file'>\nCompose 00403772-ff12-43d4-b09a-bddf28f20709 added\
    \ to the queue\n</pre>\n\nThe compose, or build of the image, is tracked using\
    \ a UUID, in the above\nexample output, 00403772-ff12-43d4-b09a-bddf28f20709.\
    \  Your UUID should be\ndifferent and unique to your build.\n\nComposes are queued\
    \ and completed in the order that they were received.  You\ncan look at the status\
    \ of the queue using `composer-cli compose status`. \n\n```\ncomposer-cli compose\
    \ status\n```\n<pre class='file'>\n00403772-ff12-43d4-b09a-bddf28f20709 RUNNING\
    \  Tue Feb 16 16:21:08 2021 node-app-server 0.0.1 qcow2            \n</pre>\n\n\
    The status will display all queued (WAITING), running (RUNNING), and \ncompleted\
    \ (FINISHED) composes.\n"
  difficulty: basic
  slug: step3
  tabs:
  - hostname: rhel
    title: Terminal
    type: terminal
  - hostname: rhel
    path: /
    port: 9090
    title: RHEL Web Console
    type: service
  timelimit: 60
  title: Step 3
  type: challenge
- assignment: "# Inspecting the image\n\nIn this step, you will access the machine\
    \ image created in a previous step in\norder to verify that the `nodejs` and `nginx`\
    \ packages added in earlier steps were\nadded to the resulting machine image.\n\
    \nIn the next steps, you will access the machine image, however it will not work\n\
    if the machine image is not yet completed.  The below command is a small\n`until`\
    \ shell script that will run until the completed machine image is created.\n\n\
    ```\nuntil $(composer-cli compose status | head -n1 | grep FINISHED &>/dev/null);\
    \ do echo \"Compose not finished ... waiting 10 seconds\"; sleep 10; done; echo\
    \ \"COMPOSE FINISHED\"\n```\n\nNow that the machine image compose is finished,\
    \ download the completed machine\nimage into your current directory.\n\n```\n\
    composer-cli compose image $(composer-cli compose status | head -n1 | cut -f1\
    \ -d\" \")\n```\n\n<pre class=\"file\">\n00403772-ff12-43d4-b09a-bddf28f20709-disk.qcow2:\
    \ 686.96 MB  \n</pre>\n\nThe above command takes the UUID of the compose as an\
    \ argument.  We embedded\nan additional call to `composer-cli compose status`\
    \ along with some data\ngrooming to put this into the command for you to run.\
    \  Alternatively, you could\nhave copy/pasted from the output of your status from\
    \ the previous step.\n\nNow that the machine image is available locally, mount\
    \ the disk image into your\ndirectory tree at the /mnt mountpoint. For this, we\
    \ will mount the qcow2 image\nas a network block device (NBD).\n\nLoad the NBD\
    \ kernel module using the `modprobe` utility -\n\n```\nmodprobe nbd\n```\n\nAttach\
    \ a qcow2 virtual image file that was downloaded into the current directory -\n\
    \n```\nqemu-nbd --connect=/dev/nbd0 $(composer-cli compose status | head -n1 |\
    \ cut -f1 -d\" \")-disk.qcow2\n```\n\nFind the virtual machine partition so that\
    \ we can mount it -\n\n```\nfdisk /dev/nbd0 -l\n```\n\n<pre class=\"file\">\n\
    Disk /dev/nbd0: 10 GiB, 10737418240 bytes, 20971520 sectors\nUnits: sectors of\
    \ 1 * 512 = 512 bytes\nSector size (logical/physical): 512 bytes / 512 bytes\n\
    I/O size (minimum/optimal): 512 bytes / 512 bytes\nDisklabel type: gpt\nDisk identifier:\
    \ D209C89E-EA5E-4FBD-B161-B461CCE297E0\n\nDevice       Start      End  Sectors\
    \  Size Type\n/dev/nbd0p1   2048     4095     2048    1M BIOS boot\n/dev/nbd0p2\
    \   4096   208895   204800  100M EFI System\n/dev/nbd0p3 208896 20971486 20762591\
    \  9.9G Linux filesystem\n</pre>\n\nThe partition of the disk is `/dev/nbd0p1`\n\
    \nMount the partition to some mountpoint (in this case `/mnt`) -\n\n```\nmount\
    \ /dev/nbd0p3 /mnt\n```\n\nTemporarily change the root directory of the bash shell\
    \ to be the directory holding the contents of\nyour machine image.\n\n```\nchroot\
    \ /mnt\n```\n\nNow, all the commands run are being executed from within the machine\
    \ image\nand use the machine image's files and content.  Use an `rpm` query to\
    \ confirm\nthat `nodejs` and `nginx` are included in the machine image.\n\n```\n\
    rpm -q nodejs nginx\n```\n\n<pre class=\"file\">\nnodejs-10.23.1-1.module+el8.3.0+9502+012d8a97.x86_64\n\
    nginx-1.14.1-9.module+el8.0.0+4108+af250afe.x86_64</pre>\n\nFrom the above output,\
    \ you can verify that both the `nodejs` and `nginx` packages were\ninstalled into\
    \ this machine image.\n\nNow that the verification is complete, you can exit the\
    \ chroot'ed bash shell.\n\n```\nexit\n```\n\nUnmount the verified machine disk\
    \ image from your filesystem.\n\n```\numount /mnt\n```\n\nDisconnect the network\
    \ block device\n\n```\nqemu-nbd --disconnect /dev/nbd0\n```\n\n<pre class=\"file\"\
    >\n/dev/nbd0 disconnected\n</pre>\n\nRemove the NBD kernel module\n\n```\nrmmod\
    \ nbd\n```\n"
  difficulty: basic
  slug: step4
  tabs:
  - hostname: rhel
    title: Terminal
    type: terminal
  - hostname: rhel
    path: /
    port: 9090
    title: RHEL Web Console
    type: service
  timelimit: 60
  title: Step 4
  type: challenge
- assignment: "# Troubleshooting a compose\n\nSometimes machine image builds are not\
    \ successful.  Looking at the logs\nof the build may be useful when troubleshooting.\n\
    \n```\ncomposer-cli compose log $(composer-cli compose status | head -n1 | cut\
    \ -f1 -d\" \")\n```\n\nThroughout the lab, you have seen the UUID of the compose\
    \ transaction used in\ncommand output and as an argument for working with individual\
    \ machine image\noperations.  The osbuild-composer back-end also uses this UUID\
    \ to store data about\nthis, specific, machine image build.  \n\nTo look at the\
    \ data associated with the machine image build you completed in the lab -\n\n\
    ```\ncomposer-cli compose results $(composer-cli compose status | head -n1 | cut\
    \ -f1 -d\" \")\n```\n\nThe output is a .tar that includes the logs, status, and\
    \ resulting image. \n\nTo view the contents of the tar file -\n\n```\ntar -tvf\
    \ $(composer-cli compose status | head -n1 | cut -f1 -d\" \").tar\n```\n"
  difficulty: basic
  slug: step5
  tabs:
  - hostname: rhel
    title: Terminal
    type: terminal
  - hostname: rhel
    path: /
    port: 9090
    title: RHEL Web Console
    type: service
  timelimit: 60
  title: Step 5
  type: challenge
description: "# Goal:\nAfter completing this scenario, users will be able to create\
  \ customized Red Hat Enterprise Linux images using the `composer-cli` command.\n\
  \n# Concepts included in this scenario:\n* Creating a custom blueprint to use for\
  \ machine image creation\n* Building a custom Red Hat Enterprise Linux machine image\n\
  * Monitoring the image build process\n* Validate the completed machine image\n\n\
  # Example Usecase:\nUsing the Image Builder commandline interface to make system\
  \ images would be a \nconsistent, repeatable, automatable way to build the same\
  \ machine images, but \noutput the image to different cloud formats for use in a\
  \ hybrid cloud \nenvironment.\n\n"
developers:
- dopinto@redhat.com
icon: https://logodix.com/logo/1910931.png
level: beginner
owner: rhel
private: false
published: true
skipping_enabled: false
slug: imagebuilder-cli
tags:
- rhel
title: Design and build virtual machine images using commandline tools [Image Builder]
type: track
