challenges:
- assignment: "eBPF is an in-kernel virtual machine that allows code execution in\
    \ the \nkernel space, in a restricted sandbox environment with access to a limited\
    \ \nset of functions. The virtual machine executes special assembly-like code.\
    \ \nThe code is then loaded in the kernel and translated to the native machine\
    \ \ncode with just-in-time compilation. There are numerous components shipped\
    \ \nby Red Hat that utilize the eBPF virtual machine. \n\nThe bcc-tools package\
    \ provides many pre-created tools that provide data from \nfunctions built with\
    \ eBPF.\n\nFirst, install the kernel-devel package for your currently running\
    \ kernel\nand the bcc-tools packages.  \n\n`yum install -y kernel-devel-$(uname\
    \ -r) bcc-tools`{{execute T1}}\n\n>**Note:** In the command above, we embed the\
    \ `uname -r` command to \nautomatically determine, and embed, the version of the\
    \ currently running kernel.\n\n\nNext, inspect the content of the bcc-tools package\
    \ to see some of the\npre-built tool catalog that is provided.  Each of these\
    \ tools has a\n`man` page which provides details on what data the tool produces\
    \ as well\nas any options that may be used when running the tool.\n\n`rpm -ql\
    \ bcc-tools | grep /usr/share/bcc/tools/`{{execute T1}}\n\n<pre class=\"file\"\
    >\n/usr/share/bcc/tools/argdist\n/usr/share/bcc/tools/bashreadline\n/usr/share/bcc/tools/biolatency\n\
    /usr/share/bcc/tools/biosnoop\n\n<< OUTPUT ABRIDGED >>\n</pre>\n\nYou will be\
    \ working with several of these tools in the next steps.  The \ntools provided\
    \ by the bcc-tools package are installed in the \n/usr/share/bcc/tools directory.\n\
    \n"
  difficulty: basic
  notes:
  - contents: '# Goal:


      After completing this scenario, users will better understand the performance
      observability tools provided in Red Hat Enterprise Linux 8.


      # Concepts included in this scenario:

      * Install bcc-tools

      * Using bpftool to verify use of eBPF

      * Run trivial eBPF tracing tools to get familiar with the concept


      # Example Usecase:


      In this lab, you are going to use tools from the bcc-tools package to analyse
      what happens on a system during a `yum update`. We picked `yum update` because
      it represents a non-trivial, real world application. In a `yum update`, the
      following activity happens:


      * TCP connections are established to configured repositories, which you will
      track with `gethostlatency` and `tcplife`.

      * Many files will be opened on your XFS filesystem, which you will observe with
      `filetop`. You will also use `xfsslower` to determine which XFS operations take
      longer than 10ms to execute.

      * Memory access. Linux uses a memory cache to ensure faster access to needed
      information than having to go to disk. Using `cachestat`, you will be able to
      see hits and misses on this cache in realtime. When everything Linux needs is
      cached, you should observe zero misses and while the cache is being populated,
      you will see a number of misses. If the cache continues to be populated beyond
      the size of the cache, Linux will employ a LRU (Least Recently Used) algorithm
      with a lot of heuristics and some cached data will be removed and replaced with
      new data.

      '
    type: text
  slug: step1
  tabs:
  - hostname: rhel
    title: CLI
    type: terminal
  - hostname: rhel
    path: /
    port: 30001
    title: Web Console
    type: service
  timelimit: 50
  title: Step 1
  type: challenge
- assignment: "In this step, you will start running the bcc-tools to prepare for observing\n\
    an active workload on the system.  In the lab environment there are several \n\
    additional terminal tabs across the top of the interface, the names correspond\n\
    to tools that you will run in this, and following steps.\n\nFirst, though, you\
    \ will validate the environment and that it is not currently\nusing any eBPF calls.\
    \  To do this, you will install the `bpftool` utility.  \n\n`yum install -y bpftool`{{execute\
    \ T1}}\n\nNext, run `bpftool` to verify that no eBPF programs are currently loaded\
    \ in \nthe kernel.  If there are no eBPF programs in use, the tool will return\
    \ no\noutput.\n\n`bpftool prog list`{{execute T1}}\n\nThe tool should have provided\
    \ no output, indicating that no eBPF tools are\nrunning in the environment.\n\n\
    Now, launch some bcc-tools applications in the separate, provided terminals.\n\
    You will use these to observe our sample workload in a following step.\n\nStart\
    \ by running `gethostlatency` in the *gethostlatency* terminal:\n\n`/usr/share/bcc/tools/gethostlatency`{{execute\
    \ T2}}\n\nYou should see the following header in the *gethostlatency* terminal,\
    \ \nindicating the tool is properly running:\n\n<pre class=\"file\">\nTIME   \
    \   PID    COMM                  LATms HOST\n</pre>\n\nIn the *gethostlatency*\
    \ terminal, you are running the `gethostlatency` bcc-tool.\nIt is showing latency\
    \ statistics on the `getaddrinfo()` and `gethostbyname()` \nsystem calls. Effectively,\
    \ you get to see how long these system calls take and \nwhich hostnames the applications\
    \ need IP addresses for. This can be useful for \ndiscovering network connections\
    \ that your applications are making.\n\n\nNext, run `tcplife` in the *tcplife*\
    \ terminal:\n\n`/usr/share/bcc/tools/tcplife`{{execute T3}}\n\nThe following header\
    \ should now be displayed in the *tcplife* terminal, \nindicating the tool is\
    \ running:\n\n<pre class=\"file\">\nPID   COMM       LADDR           LPORT RADDR\
    \           RPORT TX_KB RX_KB MS\n</pre>\n\n`tcplife` will tell you data about\
    \ established tcp connections.  PID is the\nprocess ID of the process opening\
    \ the connection.  COMM, the command that\ncorresponds to the PID.  LADDR and\
    \ LPORT reference the local address and port \nof the connection. RADDR and RPORT\
    \ the remote address and port.  TX_KB and\nRX_KB are the amount of data Transmitted\
    \ (in Kilobytes) and Received (in\nKilobytes).  MS is the time of the connection,\
    \ in milliseconds.\n\nIn the next step, you will continue to start additional\
    \ bcc-tools applications\nin the lab environment to start collecting additional\
    \ data.\n\n\n"
  difficulty: basic
  slug: step2
  tabs:
  - hostname: rhel
    title: CLI
    type: terminal
  - hostname: rhel
    path: /
    port: 30001
    title: Web Console
    type: service
  timelimit: 50
  title: Step 2
  type: challenge
- assignment: "Let's launch two more bcc-tools in separate terminals before you start\
    \ observing the sample workload:\n\nRun `filetop` in the *filetop* terminal:\n\
    \n`/usr/share/bcc/tools/filetop`{{execute T4}}\n\nIn the *filetop* terminal, you\
    \ should see a top-like tool that refreshes every second with a header that looks\
    \ like the example below:\n\n<pre class=\"file\">\n09:08:28 loadavg: 0.26 0.48\
    \ 0.72 1/817 76893\n\nTID    COMM           READS  WRITES R_Kb     W_Kb    T FILE\n\
    </pre>\n\nIf you see this, you know that the tool is properly running.  This tool\
    \ will track the count of READS and WRITES as well as the size, R_Kb and W_Kb,\
    \ respectively.  Additionally, it includes the type, T, of file and the FILE itself\
    \ that is interacted with by the command, COMM.\n\nIn the *filetop* terminal,\
    \ you are going to see applications accessing files in realtime, so this will\
    \ get pretty busy.\n\nNow run the `xfsslower` tool in the *xfsslower* terminal:\n\
    \n`/usr/share/bcc/tools/xfsslower`{{execute T5}}\n\nYou should see the header\
    \ below in the *xfsslower* terminal, indicating that the tool is properly running:\n\
    \n<pre class=\"file\">\nTracing XFS operations slower than 10 ms\nTIME     COMM\
    \           PID    T BYTES   OFF_KB   LAT(ms) FILENAME\n</pre>\n\nIn the *xfsslower*\
    \ terminal, you probably will not see much until the sample workload, a `yum update`,\
    \ begins. Once it starts to install the packages, it is going to start showing\
    \ output operations taking longer than 10ms, LAT(ms), and the files, FILENAME,\
    \ these operations are operating upon.  The sample workload will push the boundaries\
    \ of what our virtual machine's storage can keep up with which is why XFS operations\
    \ will start taking over the 10ms latency threshold used by this tool for reporting\
    \ slower operations.\n\nLastly, run the `cachestat` tool in the *cachestat* terminal:\n\
    \n`/usr/share/bcc/tools/cachestat`{{execute T6}}\n\nYou should see the following\
    \ header in the *cachestat* terminal, indicating that the tool is properly running:\n\
    \n<pre class=\"file\">\n    HITS   MISSES  DIRTIES  BUFFERS_MB  CACHED_MB\n</pre>\n\
    \nIn the *cachestat* terminal, you will get to see, in real time, the hits and\
    \ misses on the Linux memory cache. The second column is MISSES, and the third\
    \ column is HITS. You should see mostly 0 misses for the first part of the `yum\
    \ update` workload. However, once you get to the installation of packages, you\
    \ should see your misses start to increase as the operations start to interact\
    \ with files on disk and other data not already cached in system memory.\n\nNow\
    \ that you have setup several tools, use `bpftool` to verify what you have loaded\
    \ in the kernel:\n\n`bpftool prog list`{{execute T1}}\n\nYou should see output\
    \ similar to the sample below:\n\n<pre class=\"file\">\n1: kprobe  name do_entry\
    \  tag 8ac728a12cedba65  gpl\n        loaded_at 2020-02-19T19:07:30-0500  uid\
    \ 0\n        xlated 2352B  jited 1408B  memlock 4096B\n2: kprobe  name do_return\
    \  tag 6deef7357e7b4530  gpl\n        loaded_at 2020-02-19T19:07:30-0500  uid\
    \ 0\n        xlated 64B  jited 61B  memlock 4096B\n3: tracepoint  name sock__inet_sock\
    \  tag 6deef7357e7b4530  gpl\n        loaded_at 2020-02-19T19:07:30-0500  uid\
    \ 0\n        xlated 64B  jited 61B  memlock 4096B\n\n<< OUTPUT ABRIDGED >>\n</pre>\n\
    \nThis shows you all the bpf programs presently loaded.\n\nNow you are set up\
    \ with several eBPF observability tools running and in the next step, you will\
    \ begin observing the `yum update` sample workload.\n"
  difficulty: basic
  slug: step3
  tabs:
  - hostname: rhel
    title: CLI
    type: terminal
  - hostname: rhel
    path: /
    port: 30001
    title: Web Console
    type: service
  timelimit: 50
  title: Step 3
  type: challenge
- assignment: "Time to observe what happens when `yum` does an update from a system\
    \ perspective! In your first terminal, labeled *Terminal*, run:\n\n`yum update\
    \ -y`{{execute T1}}\n\nThe first thing that `yum` does is updates repository metadata.\
    \ This is going to create activity on your *gethostlatency* terminal and your\
    \ *tcplife* terminal as the data is being downloaded from the Red Hat Content\
    \ Delivery Network (CDN). You can look at those tool outputs to see the network\
    \ connections that the `yum update` establishes in real time.\n\nYou will see\
    \ entries on our *gethostlatency* terminal similar to:\n\n<pre class=\"file\"\
    >\nTIME      PID    COMM                  LATms HOST\n08:45:23  75923  yum   \
    \                 0.10 localhost\n08:45:25  75924  yum                  375.39\
    \ subscription.rhsm.redhat.com\n08:45:27  75926  yum                  109.50 subscription.rhsm.redhat.com\n\
    08:45:38  75927  yum                   10.23 cdn.redhat.com\n08:45:39  75929 \
    \ yum                   10.21 cdn.redhat.com\n08:45:40  75931  yum           \
    \        10.18 cdn.redhat.com\n</pre>\n\nthese show `yum` looking up IP addresses\
    \ for localhost, subscription.rhsm.redhat.com, and cdn.redhat.com. `gethostlatency`\
    \ makes it really easy to know what hosts our application is talking to.\n\nAlso\
    \ look at the *cachestat* terminal and you should see output similar to:\n\n<pre\
    \ class=\"file\">\n    HITS   MISSES  DIRTIES  BUFFERS_MB  CACHED_MB\n      14\
    \        0        0           0       1681\n    2768        0        0       \
    \    0       1699\n     596        0        0           0       1700\n    4143\
    \        0        0           0       1708\n    3252        0        0       \
    \    0       1698\n\n<< OUTPUT ABRIDGED >>\n</pre>\n\nThis shows that you are\
    \ operating entirely on system cache and not having to retrieve data from storage\
    \ at this point in the operation. \n\nLook at your *tcplife* terminal when `yum`\
    \ has finished downloading packages.  You will see output similar to the sample\
    \ below:\n\n<pre class=\"file\">\nPID   COMM       LADDR           LPORT RADDR\
    \           RPORT TX_KB RX_KB MS\n75963 yum        172.17.0.39     38054 2.16.30.83\
    \      443      23 138393 36375.04\n75963 yum        172.17.0.39     38054 2.16.30.83\
    \      443      24 163378 36374.62\n75963 yum        172.17.0.39     38054 2.16.30.83\
    \      443      22 163223 36374.69\n</pre>\n\n\nThe output shows you that `yum`\
    \ has established a connection on port 443 to IP address 2.16.30.83. Further,\
    \ according to the sample output above, that connection lasted for 36375.04 milliseconds,\
    \ or 36.37504 seconds. This correlates to the amount of time `yum` spent downloading\
    \ packages.\n\n"
  difficulty: basic
  slug: step4
  tabs:
  - hostname: rhel
    title: CLI
    type: terminal
  - hostname: rhel
    path: /
    port: 30001
    title: Web Console
    type: service
  timelimit: 50
  title: Step 4
  type: challenge
- assignment: "Next, `yum` will begin installing the updates and removing old packages.\
    \ To do this, `yum` is going to use the disk and memory resources; you will monitor\
    \ this using `filetop`, `xfsslower` and `cachestat`.\n\nIn the *filetop* terminal,\
    \ you will start to see files being read and written to disk. As `yum` reads files\
    \ from an rpm package, it writes them out to the disk. Below is what the read\
    \ operations should look like:\n\n<pre class=\"file\">\nTID    COMM          \
    \   READS  WRITES R_Kb    W_Kb    T FILE\n77699  yum              7      0   \
    \   2       0       R stat.h;5e5574b8\n77699  yum              3      0      0\
    \       0       R tc_defact.h;5.5574b8\n77699  yum              1      0     \
    \ 0       0       R rpmsg.h;5e5574b8\n77699  yum              2      0      0\
    \       0       R midi.h;5e5574b8\n<< OUTPUT ABRIDGED >>\n</pre>\n\nFrom the above\
    \ output, you can see in the Type column(T) that these are regular files(R). Further,\
    \ you can see the counters in the READS column report greater than 0. This shows\
    \ you in, real time, what `yum` is doing with files on the system.\n\nFurther,\
    \ on the *xfsslower* terminal, you will start to see XFS operations take longer\
    \ than the 10ms threshold and disk operations will start to be displayed:\n\n\
    <pre class=\"file\">\nTracing XFS operations slower than 10 ms\nTIME     COMM\
    \           PID    T BYTES   OFF_KB   LAT(ms) FILENAME\n09:22:58 b'yum'      \
    \   77726  S 0       0         567.45 b'packages.db-journal'\n09:22:58 b'yum'\
    \         77726  S 0       0          14.21 b'packages.db-journal'\n09:22:58 b'yum'\
    \         77726  S 0       0          14.48 b'packages.db-journal'\n09:22:58 b'yum'\
    \         77726  S 0       0          13.83 b'packages.db-journal'\n09:22:58 b'yum'\
    \         77726  S 0       0          14.16 b'packages.db-journal'\n09:22:59 b'yum'\
    \         77726  S 0       0          10.07 b'packages.db-journal'\n09:22:59 b'yum'\
    \         77726  S 0       0          27.65 b'packages.db'\n<< OUTPUT ABRIDGED\
    \ >>\n</pre>\n\nIn the above output, you see the file that `yum` is working on\
    \ and the latency in the LAT(ms) column, the data above shows that the longest\
    \ latency was 567.45 milliseconds while accessing the packages.db-journal file.\
    \ If you wish to improve the speed of `yum update` on this system by reducing\
    \ latency, you may want to look at upgrading the underlying storage of this system.\n\
    \nIf you look at the *cachestat* terminal, you will see that the number of misses\
    \ on the cache has gone up during the `yum` package installation procedure as\
    \ it is starting to need access to data that is not cached:\n\n<pre class=\"file\"\
    >\n    HITS   MISSES  DIRTIES  BUFFERS_MB  CACHED_MB\n       0       62      \
    \  0           0       1701\n       0       52        0           0       1702\n\
    \      45        2        0           0       1701\n    5721     3777        0\
    \           0       1716\n   18683     6606        0           0       1747\n\
    \   14853     6223        0           0       1778\n       0        2        0\
    \           0       1778\n\n<< OUTPUT ABRIDGED >>\n</pre>\n\nIf you keep watching\
    \ the *cachestat* terminal, you will notice that the number of misses goes back\
    \ down to zero after the `yum update` completes. This is because when the `yum\
    \ update` is finished, the virtual machine returns to a more idle state and there\
    \ is very little running that needs access to storage.\n\n"
  difficulty: basic
  slug: step5
  tabs:
  - hostname: rhel
    title: CLI
    type: terminal
  - hostname: rhel
    path: /
    port: 30001
    title: Web Console
    type: service
  timelimit: 50
  title: Step 5
  type: challenge
- assignment: 'In this lab, you have now observed: host name resolution, tcp connection
    information, file activity (in real time), filesystem latency, and realtime hits
    and misses on the memory cache on a Red Hat Enterprise Linux 8 system. Tools utilizing
    eBPF, such as those shipped with bcc-tools in Red Hat Enterprise Linux 8, are
    very powerful and allow you quick access to information about the kernel and your
    systems.


    Take a look at how many tools are provided by bcc-tools:


    `ls -l /usr/share/bcc/tools | wc -l`{{execute T1}}


    <pre class="file">

    112

    </pre>


    The 107 tools, counted in the example above, can be easily inspected or even modified
    since they are actually Python scripts:


    `file /usr/share/bcc/tools/biolatency`{{execute T1}}


    <pre class="file">

    /usr/share/bcc/tools/biolatency: Python script, ASCII text executable

    </pre>


    Each of the tools shipped in the bcc-tools package contains a portion written
    in C language which is the code of the eBPF program which, after compilation,
    is passed to the kernel via the bpf() system call and used for collection and
    analysis of the data. The Python script then reads output of this eBPF program
    and allows easy formatting or further processing.

    '
  difficulty: basic
  slug: step6
  tabs:
  - hostname: rhel
    title: CLI
    type: terminal
  - hostname: rhel
    path: /
    port: 30001
    title: Web Console
    type: service
  timelimit: 50
  title: Step 6
  type: challenge
description: '# Goal:


  After completing this scenario, users will better understand the performance observability
  tools provided in Red Hat Enterprise Linux 8.


  # Concepts included in this scenario:

  * Install bcc-tools

  * Using bpftool to verify use of eBPF

  * Run trivial eBPF tracing tools to get familiar with the concept


  # Example Usecase:


  In this lab, you are going to use tools from the bcc-tools package to analyse what
  happens on a system during a `yum update`. We picked `yum update` because it represents
  a non-trivial, real world application. In a `yum update`, the following activity
  happens:


  * TCP connections are established to configured repositories, which you will track
  with `gethostlatency` and `tcplife`.

  * Many files will be opened on your XFS filesystem, which you will observe with
  `filetop`. You will also use `xfsslower` to determine which XFS operations take
  longer than 10ms to execute.

  * Memory access. Linux uses a memory cache to ensure faster access to needed information
  than having to go to disk. Using `cachestat`, you will be able to see hits and misses
  on this cache in realtime. When everything Linux needs is cached, you should observe
  zero misses and while the cache is being populated, you will see a number of misses.
  If the cache continues to be populated beyond the size of the cache, Linux will
  employ a LRU (Least Recently Used) algorithm with a lot of heuristics and some cached
  data will be removed and replaced with new data.

  '
developers:
- dopinto@redhat.com
icon: https://logodix.com/logo/1910931.png
level: beginner
owner: rhel
private: false
published: true
skipping_enabled: false
slug: ebpf-tracing
tags:
- rhel
title: Performance observability in practice with bcc-tools
type: track
