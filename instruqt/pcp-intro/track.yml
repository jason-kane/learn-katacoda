challenges:
- assignment: "# Validate Environment and Install PCP\n\n>**Note:** For this scenario,\
    \ we have started installing SQL Server in the background. The background task\
    \ will take between 2-5 minutes to complete. \n\nPerformance Co-Pilot (PCP) provides\
    \ a large number of command-line and graphical tools, as well as libraries to\
    \ support system-level performance monitoring and management. PCP's architecture\
    \ and services are designed to centralize the monitoring of performance across\
    \ complex distributed systems.\n\nIn this introductory PCP lab, our setup consists\
    \ of a single node system running PCP. We have setup two terminal windows running\
    \ on the local machine - The current terminal will be used for OS specific commands\
    \ and to interact with SQL Server. The *pcp* terminal will be used for running\
    \ pcp specific commands and looking at the output.\n\nTo check if SQL Server installation\
    \ is complete, we can use the following command -\n\n`systemctl status mssql-server.service\
    \ --no-pager`{{execute T1}}\n\n<pre class=\"file\">\n<< OUTPUT ABRIDGED >>\n\n\
    Active: active (running) since Monday 2019-07-15 19:24:18 EDT; 3h 59min left\n\
    \n<< OUTPUT ABRIDGED >>\n</pre>\n\nVerify that the Active status is __active (running)__.\n\
    \nInstall the PCP packages using yum \n\n`yum install pcp-zeroconf -y`{{execute\
    \ T1}}\n\nStart and enable the __PCP's Collector Daemon (PMCD)__ to start collecting\
    \ system performance data \n\n`systemctl start pmcd`{{execute T1}}\n\n`systemctl\
    \ enable pmcd`{{execute T1}}\n\nCheck the status of the enabled PMCD service \n\
    \n`systemctl status pmcd --no-pager`{{execute T1}}\n\n<pre class=\"file\">\n<<\
    \ OUTPUT ABRIDGED >>\n\n Loaded: loaded (/usr/lib/systemd/system/pmcd.service;\
    \ enabled; vendor preset: disabled)\n   Active: active (running) since Thu 2021-03-11\
    \ 13:18:12 EST; 6min ago\n\n<< OUTPUT ABRIDGED >>\n</pre>\n\nVerify that the Active\
    \ status is __active (running)__.\n"
  difficulty: basic
  notes:
  - contents: "# Goal:\nAfter completing this scenario, users will be able to understand\
      \ the basics of Performance Co-Pilot (PCP) in RHEL, and use PCP to analyze the\
      \ performance of Microsoft SQL Server running on Red Hat Enterprise Linux\n\n\
      # Concepts included in this scenario:\n* Install Performance Co-Pilot (PCP)\
      \ packages on RHEL\n* Analyze critical system resources using PCP \n* Install\
      \ Performance Metric Domain Agents (PMDA) for SQL Server  \n* Analyze SQL Server\
      \ performance by running a sample columnstore-based analytic query using SQL\
      \ Server\n\n>**BACKGROUND:** The first step to solving performance issues is\
      \ being able to diagnose the issue. If you don\u2019t have performance metrics\
      \ and the ability to analyze them, you\u2019re just relying on guesswork. One\
      \ of the popular tools for performance monitoring on Linux is Performance Co-Pilot\
      \ (PCP), and we\u2019ll show you how to get started using PCP on Red Hat Enterprise\
      \ Linux to collect and analyze data to solve your performance mysteries.\n"
    type: text
  slug: step1
  tabs:
  - hostname: rhel
    title: Terminal
    type: terminal
  - hostname: rhel
    path: /
    port: 9090
    title: RHEL Web Console
    type: service
  timelimit: 75
  title: Step 1
  type: challenge
- assignment: "# Using PCP for system metrics\n\n>**NOTE:** In this step we will be\
    \ using the *pcp* terminal to run PCP commands. \n\nSelect the *pcp* terminal\
    \ to run commands in this step.\n\n## Inspect the PCP configuration on the host\n\
    \nTo inspect the PCP configuration and view a summary of the current PCP installation\
    \ use the `pcp` command\n\n`pcp`{{execute T2}}\n\n<pre class=\"file\">\nPerformance\
    \ Co-Pilot configuration on be5455ac10c4:\n\n platform: Linux be5455ac10c4 4.18.0-240.el8.x86_64\
    \ #1 SMP Wed Sep 23 05:13:10 EDT 2020 x86_64\n hardware: 2 cpus, 1 disk, 1 node,\
    \ 3688MB RAM\n timezone: EST+5\n services: pmcd\n     pmcd: Version 5.1.1-4, 12\
    \ agents, 3 clients\n     pmda: root pmcd proc pmproxy xfs linux nfsclient mmv\
    \ kvm jbd2\n           dm openmetrics\n pmlogger: primary logger: /var/log/pcp/pmlogger/be5455ac10c4/20210311.10.13\n\
    \     pmie: primary engine: /var/log/pcp/pmie/be5455ac10c4/pmie.log\n\n<< OUTPUT\
    \ ABRIDGED >>\n</pre>\n\nThe output shows the two main underlying components of\
    \ PCP : __PCP's Collector Daemon (PMCD)__ which organizes, collects, manages metric\
    \ information, and the __Performance Metric Domain Agents (PMDAs)__ which knows\
    \ how to gather information for different services. The file paths for __pmlogger__\
    \ (which archives logs of performance metric values) and __pmie__ (inference engine\
    \ for performance metrics) are also shown in the output.\n\n## Available PCP Kernel\
    \ metrics ##\nPCP can collect and show a host of different system kernel metrics.\n\
    \nDisplay the kernel metrics on the host with a short description using `pminfo`\
    \ :\n\n`pminfo -t kernel.all`{{execute T2}}\n\n<pre class=\"file\">\n<< OUTPUT\
    \ ABRIDGED >>\nkernel.all.nprocs [total number of processes (lightweight)]\nkernel.all.pid_max\
    \ [maximum process identifier from /proc/sys/kernel/pid_max]\nkernel.all.cpu.user\
    \ [total user CPU time from /proc/stat for all CPUs, including guest CPU time]\n\
    kernel.all.cpu.nice [total nice user CPU time from /proc/stat for all CPUs, including\
    \ guest time]\nkernel.all.cpu.sys [total sys CPU time from /proc/stat for all\
    \ CPUs]\nkernel.all.cpu.idle [total idle CPU time from /proc/stat for all CPUs]\n\
    kernel.all.cpu.intr [total interrupt CPU time from /proc/stat for all CPUs]\n\
    kernel.all.cpu.steal [total virtualisation CPU steal time for all CPUs]\nkernel.all.cpu.guest\
    \ [total virtual guest CPU time for all CPUs]\nkernel.all.cpu.vuser [total user\
    \ CPU time from /proc/stat for all CPUs, excluding guest CPU time]\nkernel.all.cpu.guest_nice\
    \ [total virtual guest CPU nice time for all CPUs]\nkernel.all.cpu.vnice [total\
    \ nice user CPU time from /proc/stat for all CPUs, excluding guest time]\nkernel.all.cpu.wait.total\
    \ [total wait CPU time from /proc/stat for all CPUs]\nkernel.all.cpu.irq.soft\
    \ [soft interrupt CPU time from /proc/stat for all CPUs]\nkernel.all.cpu.irq.hard\
    \ [hard interrupt CPU time from /proc/stat for all CPUs]\nkernel.all.interrupts.total\
    \ One-line Help: Error: One-line or help text is not available\nkernel.all.interrupts.errors\
    \ [interrupt error count from /proc/interrupts]\nkernel.all.softirqs.total One-line\
    \ Help: Error: One-line or help text is not available\n<< OUTPUT ABRIDGED >>\n\
    </pre>\n\nCheck out `man pminfo` if you are interested in more details about the\
    \ `pminfo` tool.\n\n## Monitoring performance using PCP ##\n\nThe `pmrep` utility\
    \ takes any of the available metrics and reports them in ASCII tables.\n\nThe\
    \ command reports idle processor utilization for each CPU on the host, every 1\
    \ seconds in a 5 seconds window :\n\n`pmval -t 1 -T 5 kernel.percpu.cpu.idle`{{execute\
    \ T2}}\n\n>**NOTE:** In the command above, if the hostname is not specified, it\
    \ defaults to using `localhost`. By using the -h option, you can specify the hostname\
    \ of a remote host to monitor for the specific metric.\n\n<pre class=\"file\"\
    >\nmetric:    kernel.percpu.cpu.idle\nhost:      ae6a0554552e\nsemantics: cumulative\
    \ counter (converting to rate)\nunits:     millisec (converting to time utilization)\n\
    samples:   6\ninterval:  1.00 sec\n\n              cpu0                  cpu1\
    \    \n               0.9694                0.9894 \n               0.9693   \
    \             0.9993 \n               0.9692                0.9892 \n        \
    \       0.9692                0.9891 \n</pre>\n\nTo learn more about the PCP in\
    \ Red Hat Enterprise Linux, check [Performance observability in practice with\
    \ bcc-tools](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/monitoring_and_managing_system_status_and_performance/monitoring-performance-with-performance-co-pilot_monitoring-and-managing-system-status-and-performance)\n\
    \nWe will use the `pmval` tool to monitor SQL Server performance in a later step.\n"
  difficulty: basic
  slug: step2
  tabs:
  - hostname: rhel
    title: Terminal
    type: terminal
  - hostname: rhel
    path: /
    port: 9090
    title: RHEL Web Console
    type: service
  timelimit: 75
  title: Step 2
  type: challenge
- assignment: "# Configuring PMDAs for SQL Server\n\nFor this step, we will be switching\
    \ back to our *Terminal* tab. \n\nThe PCP Microsoft SQL Server Performance Metrics\
    \ Domain Agent (PMDA) queries important performance metrics from SQL Server using\
    \ SQL Servers Dynamic Management Views (DMVs).\n\nTo list the PCP PMDA packages\
    \ related to Microsoft SQL Server -\n\n`yum search pcp-pmda | grep \"Microsoft\
    \ SQL Server\"`{{execute T1}}\n\n<pre class=\"file\">\nLast metadata expiration\
    \ check: 0:24:59 ago on Fri 12 Mar 2021 09:20:29 AM EST.\npcp-pmda-mssql.x86_64\
    \ : Performance Co-Pilot (PCP) metrics for Microsoft SQL Server\n</pre>\n\nInstall\
    \ the PCP PMDA package for Microsoft SQL Server - \n\n`sudo yum install pcp-pmda-mssql\
    \ -y`{{execute T1}}\n\n<pre class=\"file\">\n<< OUTPUT ABRIDGED >>\nInstalled:\n\
    \  pcp-pmda-mssql-5.1.1-4.el8_3.x86_64                                       \
    \                          \n<< OUTPUT ABRIDGED >>\n</pre>\n\nCreate a new user\
    \ in SQL Server to be used by PCP. The next command uses `sqlcmd` to run a SQL\
    \ script file called createUser.sql. The script creates a SQL Server user login\
    \ called `pcpLogin` and only grants limited SQL Server privileges that are needed\
    \ by PCP. \n\n<pre class=\"file\">\n//Create a SQL Server login and user associated\
    \ with that login. Grant VIEW SERVER STATE AND VIEW DATABASE STATE permissions\
    \ to the user\n\nCREATE LOGIN pcpLogin WITH PASSWORD = 'RedHat1!';\nCREATE USER\
    \ pcpUser FOR LOGIN pcpLogin;  \n\nGRANT VIEW SERVER STATE TO pcpUser;\nGRANT\
    \ VIEW DATABASE STATE TO pcpUser;\n</pre>\n\n`/opt/mssql-tools/bin/sqlcmd -S localhost\
    \ -U sa -P Redhat1! -i createUser.sql`{{execute T1}}\n\nView the contents of the\
    \ SQL Server PMDA configuration file \n\n`cat /var/lib/pcp/pmdas/mssql/mssql.conf`{{execute\
    \ T1}}\n\nSo that PCP can connect to SQL Server with a low privileged SQL Server\
    \ account, update the Login name in the configuration file \n\n`sed -i 's/sa/pcpLogin/g'\
    \ /var/lib/pcp/pmdas/mssql/mssql.conf`{{execute T1}}\n\nUpdate the password corresponding\
    \ to the low privileged account in the configuration file \n\n`sed -i 's/P4$$W0rd/Redhat1!/g'\
    \ /var/lib/pcp/pmdas/mssql/mssql.conf`{{execute T1}}\n\nMake sure the configuration\
    \ file is owned by the root user and group, and that appropriate permissions are\
    \ set \n\n`chown root:root /var/lib/pcp/pmdas/mssql/mssql.conf`{{execute T1}}\n\
    \n`chmod 400 /var/lib/pcp/pmdas/mssql/mssql.conf`{{execute T1}}\n\n## Install\
    \ the SQL Server PMDA agent\n\nInstall the PMDA agent for SQL Server\n\n`cd /var/lib/pcp/pmdas/mssql;\
    \ ./Install`{{execute T1}}\n\n<pre class=\"file\">\nUpdating the Performance Metrics\
    \ Name Space (PMNS) ...\nTerminate PMDA if already installed ...\nUpdating the\
    \ PMCD control file, and notifying PMCD ...\nCheck mssql metrics have appeared\
    \ ... 168 metrics and 601 values\n</pre>\n\n>**Note:** The successful message\
    \ indicating that mssql metrics have appeared\n"
  difficulty: basic
  slug: step3
  tabs:
  - hostname: rhel
    title: Terminal
    type: terminal
  - hostname: rhel
    path: /
    port: 9090
    title: RHEL Web Console
    type: service
  timelimit: 75
  title: Step 3
  type: challenge
- assignment: "# Measure SQL Server Performance Metrics Using PCP\n\nUse the PCP `pminfo`\
    \ command to see a complete list of metrics run in SQL Server on RHEL.\n\n`pminfo\
    \ mssql`{{execute T2}}\n\n<pre class=\"file\">\n<< OUTPUT ABRIDGED >>\nmssql.locks.raw_average_wait_time_base\n\
    mssql.locks.raw_average_wait_time\nmssql.locks.lock_wait_time\nmssql.locks.lock_waits\n\
    mssql.locks.deadlocks\nmssql.locks.lock_timeouts\nmssql.locks.lock_requests\n\
    mssql.general.processes_blocked\nmssql.general.transactions\nmssql.general.logical_connections\n\
    mssql.general.user_connections\nmssql.general.logouts\nmssql.general.connection_reset\n\
    mssql.general.logins\nmssql.general.temp_tables_creation_rate\nmssql.general.active_temp_tables\n\
    mssql.buffer_node.remote_node_page_lookups\nmssql.buffer_node.local_node_page_lookups\n\
    mssql.buffer_node.page_life_expectancy\nmssql.buffer_node.database_pages\nmssql.memory_broker_clerks.pressure_evictions\n\
    mssql.memory_broker_clerks.periodic_evictions\nmssql.memory_broker_clerks.internal_benefit\n\
    mssql.memory_broker_clerks.simulation_size\nmssql.memory_broker_clerks.simulation_benefit\n\
    mssql.memory_broker_clerks.size\nmssql.buffer_manager.page_life_expectancy\nmssql.buffer_manager.background_writer_pages\n\
    mssql.buffer_manager.checkpoint_pages\nmssql.buffer_manager.page_writes\nmssql.buffer_manager.page_reads\n\
    mssql.buffer_manager.readahead_time\nmssql.buffer_manager.readahead_pages\nmssql.buffer_manager.lazy_writes\n\
    mssql.buffer_manager.integral_controller_slope\nmssql.buffer_manager.target_pages\n\
    mssql.buffer_manager.database_pages\nmssql.buffer_manager.free_pages\nmssql.buffer_manager.page_lookups\n\
    mssql.buffer_manager.raw_buffer_cache_hit_ratio_base\nmssql.buffer_manager.raw_buffer_cache_hit_ratio\n\
    mssql.buffer_manager.buffer_cache_hit_ratio\nmssql.databases.log_cache_hit_ratio\n\
    mssql.latches.average_latch_wait_time\nmssql.locks.average_wait_time\nmssql.plan_cache.cache_hit_ratio\n\
    </pre>\n\nThere are more than 150 metrics tracked across different SQL Server\
    \ resources that PCP can capture. \n\nNow, let's run an aggregation SQL query\
    \ shown below using `sqlcmd` as a background task, and monitor the SQL wait statistics\
    \ using the `pmval` command in PCP over a 10 second window. Wait statistics are\
    \ one of the most important indicators to identify performance issues in SQL Server.\
    \ \n\n<pre class=\"file\">\n//The aggregation query over 500 million rows\nSELECT\
    \ SUM(Price), AVG(Price) FROM Orders;\n</pre>\n\n`(/opt/mssql-tools/bin/sqlcmd\
    \ -S localhost -U sa -P Redhat1! -i ~/Scripts/CSNoIndex.sql | grep 'columnstore\
    \ index' &>/dev/null &) && (pmval -t 1 -T 10 mssql.os_wait_stats.waiting_tasks)`{{execute\
    \ T2}}\n\n> **NOTE**:  The results give administrators a good indication of where\
    \ the problem might exist. For example, higher CXPACKET  wait values might indicate\
    \ contention due to thread parallelism, and might require adjusting the degree\
    \ of parallelism (MAXDOP) in SQL Server.\n"
  difficulty: basic
  slug: step4
  tabs:
  - hostname: rhel
    title: Terminal
    type: terminal
  - hostname: rhel
    path: /
    port: 9090
    title: RHEL Web Console
    type: service
  timelimit: 75
  title: Step 4
  type: challenge
description: "# Goal:\nAfter completing this scenario, users will be able to understand\
  \ the basics of Performance Co-Pilot (PCP) in RHEL, and use PCP to analyze the performance\
  \ of Microsoft SQL Server running on Red Hat Enterprise Linux\n\n# Concepts included\
  \ in this scenario:\n* Install Performance Co-Pilot (PCP) packages on RHEL\n* Analyze\
  \ critical system resources using PCP \n* Install Performance Metric Domain Agents\
  \ (PMDA) for SQL Server  \n* Analyze SQL Server performance by running a sample\
  \ columnstore-based analytic query using SQL Server\n\n>**BACKGROUND:** The first\
  \ step to solving performance issues is being able to diagnose the issue. If you\
  \ don\u2019t have performance metrics and the ability to analyze them, you\u2019\
  re just relying on guesswork. One of the popular tools for performance monitoring\
  \ on Linux is Performance Co-Pilot (PCP), and we\u2019ll show you how to get started\
  \ using PCP on Red Hat Enterprise Linux to collect and analyze data to solve your\
  \ performance mysteries.\n"
developers:
- rhel-tmm@redhat.com
icon: https://storage.googleapis.com/instruqt-frontend/img/tracks/default.png
level: beginner
owner: rhel
private: false
published: true
skipping_enabled: false
slug: pcp-intro
tags:
- rhel
title: Performance Co-Pilot (PCP) on Red Hat Enterprise Linux
type: track
