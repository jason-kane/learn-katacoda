challenges:
- assignment: '# What are processes?


    _Files_ keep track of information on a Linux system, providing a way for users

    to organize and store information. Sometimes, files contain information that

    can be run to carry out a specific operation. These kinds of files are called

    _programs_. When you run a program, the running instance is called a _process_.

    Modern Linux systems have tons of processes running at any given moment, so it

    is crucial to have a way to manage these processes.


    # Viewing processes


    The command that lets you view processes on Linux is `ps`, short for "Process
    Status".

    This command will show you all processes running in the current shell if called
    without

    any options. However, it is frequently useful to see processes that may not

    have been started with your user ID. The command `ps aux` will show you all processes,

    including those running without a controlling terminal. This command will also
    give

    information about the users associated with these processes.


    `ps aux`{{execute T1}}


    <pre class=file>

    USER         PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND

    root           1  0.0  0.7 186268 14440 ?        Ss   16:09   0:03 /usr/lib/systemd/systemd
    --switched-root --system --deserialize 17

    root           2  0.0  0.0      0     0 ?        S    16:09   0:00 [kthreadd]

    root           3  0.0  0.0      0     0 ?        I<   16:09   0:00 [rcu_gp]

    root           4  0.0  0.0      0     0 ?        I<   16:09   0:00 [rcu_par_gp]


    << OUTPUT ABRIDGED >>

    </pre>


    This output is very extensive, so often when you call this command you want to

    pipe the output into `grep` to search for a specific phrase. To practice this,

    start a process in Terminal 2 and then search for it in the original

    terminal. The `dd` command can be used to create an indefinite process in

    Terminal 2. The command below begins copying data from a file of infinite zeros

    into a file that discards all inputs, so the process will continue indefinitely.


    `dd if=/dev/zero of=/dev/null`{{execute T2}}


    When you run this command, you will not see an output as the process will

    continue running in the foreground until you interrupt it. Returning to the

    original terminal, run a search on `ps aux` to find this indefinite `dd` process:


    `ps aux | head -n1 ; ps aux | grep ''[d]d ''`{{execute T1}}


    <pre class=file>

    USER         PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND

    root        3790  101  0.0   7352   944 pts/1    R+   17:38   0:01 dd if=/dev/zero
    of=/dev/null

    </pre>


    >_NOTE:_ The first command in this line will print the column headers for `ps
    aux`

    so that you can see what each entry means. The second command searches for a

    process called `dd `, where the single quotes ensure the trailing space is

    part of the search criteria. Enclosing the first "d" in square brackets prevents

    the `grep` search from finding itself when it looks through the process list.


    Take note of the second column, the Process ID. This ID is how you interact

    with the process, as it can be used in other commands as a unique reference to

    this process. Now you know how to find a process. The next step will walk you
    through

    terminating this indefinite process.

    '
  difficulty: basic
  notes:
  - contents: "# Overview:\n\nServices are processes that run in the background of\
      \ a system, out of the user\u2019s view. They typically lack an interface and\
      \ therefore have to be interacted with using commands. Services streamline the\
      \ user experience by taking care of operations automatically and in a way that\
      \ does not distract the user. There is actually a service that manages the starting\
      \ and stopping of other services, `systemd`. This lab provides the basics of\
      \ starting and stopping services using `systemctl`, which is the command that\
      \ allows users to interact with the `systemd` service.\n\n# Goal:\n\nAfter completing\
      \ this lab, users will understand how to start, restart, and stop a service.\
      \ You will also learn how to make a service start every time the system starts.\n\
      \n# Concepts included in this scenario:\n\n* View and kill processes\n* Learn\
      \ how processes and services are related\n* View the status of a service\n*\
      \ Learn how `systemd` and `systemctl` are related\n* Enable a service with `systemctl`\
      \ to make it persistent\n* Restart a service to activate configuration changes\n"
    type: text
  slug: step1
  tabs:
  - hostname: rhel
    title: CLI
    type: terminal
  - hostname: rhel
    path: /
    port: 30001
    title: Web Console
    type: service
  timelimit: 60
  title: Step 1
  type: challenge
- assignment: '# Killing processes


    Now that you found the `dd` process on Terminal 1, terminate it using the `kill`

    command. You would typically just manually enter the process ID after `kill`.

    The process ID is the second column of the `ps aux` output from before.

    However, to make this command clickable for each new lab instance the `pidof`

    (__P__rocess __ID of__) command is used to automatically find the process ID.


    `kill $(pidof dd)`{{execute T1}}


    There is no output, but switching back to Terminal 2

    reveals that the `dd` process has been terminated.


    ` `{{execute T2}}


    <pre class=file>

    Terminated

    </pre>


    The `kill` command can send a variety of signals. Calling the command without

    any options will default to `-SIGTERM`. This command will inform the process

    that it is time for it to stop, but allow it to run any cleanup procedures that

    it has. This often takes the form of closing files and freeing memory. In this

    sense, `-SIGTERM` is the graceful option for terminating a process.


    If you instead use the `kill -SIGKILL` command, this will instruct the kernel
    to

    immediately stop the process. This prevents any cleanup that may have otherwise

    occurred, leaving memory allocated and potentially leading to corrupted files.

    Therefore, only use `-SIGKILL` as a last resort.


    >_NOTE:_ You will also see the `kill` signals referred to numerically. `-SIGTERM`

    is equivalent to `-15` and `-SIGKILL` is equivalent to `-9`.

    '
  difficulty: basic
  slug: step2
  tabs:
  - hostname: rhel
    title: CLI
    type: terminal
  - hostname: rhel
    path: /
    port: 30001
    title: Web Console
    type: service
  timelimit: 60
  title: Step 2
  type: challenge
- assignment: "# What is a service?\n\nThe process you interacted with in the previous\
    \ step was a foreground process.\nIt ran in a terminal window where you could\
    \ see it. Some processes run in the\nbackground, out of view of the user. These\
    \ background processes allow the\nsystem to carry out many operations in parallel.\
    \ Background processes that\ncontinuously carry out a set of actions are called\
    \ _services_.\n\n_Daemons_ are even more specialized. These are services that\n\
    and are specifically designed to supervise or support other processes. Typically,\n\
    daemons are denoted by a __d__ at the end of their name. For example, __firewalld__\n\
    is the daemon which handles firewall functionality. These daemons lie in wait,\n\
    listening for the user to issue a command to tell them to change their behavior.\n\
    \n# Viewing the status of a service\n\n__firewalld__ is a service which manages\
    \ what network traffic to let into the system.\nCheck the status of the __firewalld__\
    \ service with the following command:\n\n`systemctl status firewalld.service --no-pager`{{execute\
    \ T1}}\n\n<pre class=file>\n\u25CF firewalld.service - firewalld - dynamic firewall\
    \ daemon\n   Loaded: loaded (/usr/lib/systemd/system/firewalld.service; enabled;\
    \ vendor preset: enabled)\n   Active: active (running) since Mon 2021-06-28 15:50:21\
    \ EDT; 1h 49min ago\n     Docs: man:firewalld(1)\n Main PID: 875 (firewalld)\n\
    \    Tasks: 2 (limit: 11380)\n   Memory: 35.3M\n\n<< OUTPUT ABRIDGED >>\n</pre>\n\
    \nFrom this status message it is clear that the __firewalld__ service is installed\n\
    and active. But what is managing this service? It turns out that another service,\n\
    __systemd__, is in charge of managing all of the services on the system.\n\n#\
    \ __systemd__ vs. __systemctl__\n\nWhen researching service management, you will\
    \ come across two very similar terms:\n__systemd__ and __systemctl__. These are\
    \ very closely related.\n__systemd__, short for system daemon, manages the state\
    \ of the system and any\nservices running on it. Since __systemd__ is a daemon,\
    \ it runs in the background\nand needs a set of commands for users to interact\
    \ with it. __systemctl__ provides\nthese commands. The `systemctl status` command\
    \ above is one example of this,\nand the upcoming steps will walk you through\
    \ starting and enabling a service\nwith __systemctl__.\n"
  difficulty: basic
  slug: step3
  tabs:
  - hostname: rhel
    title: CLI
    type: terminal
  - hostname: rhel
    path: /
    port: 30001
    title: Web Console
    type: service
  timelimit: 60
  title: Step 3
  type: challenge
- assignment: "# Starting and enabling a service with `systemctl`\n\nFor this example,\
    \ you will be using the Network File System (NFS) service.\nThis service allows\
    \ users on client systems to view files and directories over a\nnetwork as if\
    \ they were on the client's local drive. Rather than focusing on the\nfunctionality\
    \ of this service, though, this lab simply uses it as an example of\nhow to start\
    \ a service and implement configuration file changes.\n\nTo begin, run the command\
    \ to show the export list for the NFS server:\n\n`showmount -e`{{execute T1}}\n\
    \nThis throws an error, because the NFS service is not running.\n\n<pre class=file>\n\
    clnt_create: RPC: Program not registered\n</pre>\n\nTo solve this issue, you need\
    \ to start the service. However, if you want the service\nto start each time you\
    \ boot the system, you need to enable the service. You can\ndo both of these operations\
    \ in one line:\n\n`systemctl enable --now nfs-server`{{execute T1}}\n\n<pre class=file>\n\
    Created symlink /etc/systemd/system/multi-user.target.wants/nfs-server.service\
    \ \u2192 /usr/lib/systemd/system/nfs-server.service\n</pre>\n\n>_Note:_ If you\
    \ just wanted to start a service, `systemctl start`\nfollowed by the service name\
    \ will do the trick. However, the service\nwill not start again if you reboot\
    \ the system.\n\nNow the __nfs-server__ service is started, and it will start\
    \ every time the\nsystem starts as well. Run the `showmount` command again now\
    \ that the service\nis active:\n\n`showmount -e`{{execute T1}}\n\n<pre class=file>\n\
    Export list for b02029791f2d:\n</pre>\n\nThe export list is currently blank, which\
    \ is something controlled by a\nconfiguration file. You may assume that changing\
    \ a config file would\nimmediately lead to changes in the service, but this is\
    \ not the case.\nThe next step will walk you through restarting a service to reload\
    \ configuration\nfiles.\n"
  difficulty: basic
  slug: step4
  tabs:
  - hostname: rhel
    title: CLI
    type: terminal
  - hostname: rhel
    path: /
    port: 30001
    title: Web Console
    type: service
  timelimit: 60
  title: Step 4
  type: challenge
- assignment: '# Restarting a service to apply configuration changes


    To demonstrate how configuration changes behave when a service is already running,

    add an export directory to the NFS service on this system:


    `echo "/home" >> /etc/exports`{{execute T1}}


    This command adds the home directory to the export list configuration file for

    NFS. Changing this config file does not lead to any immediate changes in the

    NFS service, though. Print the export list again to confirm this:


    `showmount -e`{{execute T1}}


    <pre class=file>

    Export list for b02029791f2d:

    </pre>


    To bring configuration changes into the service, you must first use `systemctl`

    to restart it:


    `systemctl restart nfs-server`{{execute T1}}


    Now the configuration files have been re-read and NFS reflects the

    configuration change.


    `showmount -e`{{execute T1}}


    <pre class=file>

    Export list for b02029791f2d:

    /home *

    </pre>


    The home directory is now listed as an exported drive that is available to

    all NFS clients. If you ever run into a scenario where you are unable to see

    configuration changes, make sure you check whether or not you have restarted

    the service and reloaded the config files.


    # __systemd__ Cheat Sheet


    This lab just scratches the surface of __systemd__''s capabilities. Red Hat provides
    a

    [systemd Cheat Sheet](https://access.redhat.com/articles/systemd-cheat-sheet)

    which has a variety of other commands that are useful for service management.

    '
  difficulty: basic
  slug: step5
  tabs:
  - hostname: rhel
    title: CLI
    type: terminal
  - hostname: rhel
    path: /
    port: 30001
    title: Web Console
    type: service
  timelimit: 60
  title: Step 5
  type: challenge
description: "# Overview:\n\nServices are processes that run in the background of\
  \ a system, out of the user\u2019s view. They typically lack an interface and therefore\
  \ have to be interacted with using commands. Services streamline the user experience\
  \ by taking care of operations automatically and in a way that does not distract\
  \ the user. There is actually a service that manages the starting and stopping of\
  \ other services, `systemd`. This lab provides the basics of starting and stopping\
  \ services using `systemctl`, which is the command that allows users to interact\
  \ with the `systemd` service.\n\n# Goal:\n\nAfter completing this lab, users will\
  \ understand how to start, restart, and stop a service. You will also learn how\
  \ to make a service start every time the system starts.\n\n# Concepts included in\
  \ this scenario:\n\n* View and kill processes\n* Learn how processes and services\
  \ are related\n* View the status of a service\n* Learn how `systemd` and `systemctl`\
  \ are related\n* Enable a service with `systemctl` to make it persistent\n* Restart\
  \ a service to activate configuration changes\n"
developers:
- dopinto@redhat.com
icon: https://logodix.com/logo/1910931.png
level: beginner
owner: rhel
private: false
published: true
skipping_enabled: false
slug: service-admin
tags:
- rhel
title: Service Administration Basics [Admin 101]
type: track
