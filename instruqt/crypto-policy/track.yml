challenges:
- assignment: "# Validate the Environment \nUsing the provided system terminal session,\
    \ validate the initial environment.   \n\nFirst, verify the current system-wide\
    \ cryptographic policy.   \n\n`update-crypto-policies --show`{{execute T1}}\n\n\
    <pre class=\"file\">\nDEFAULT\n</pre>\n\nThe default configuration on Red Hat\
    \ Enterprise Linux for the system-wide\ncryptographic policy (sometimes referred\
    \ to as \"crypto policy\") is a\npolicy named `DEFAULT`.   \n\nSecure Socket Layer\
    \ (SSL) is one of the cryptography methods managed by\nthe system-wide cryptography\
    \ policy.  Throughout the exercise, you will\nwork with Apache as it is a service\
    \ that utilizes SSL.  Hence, changes\nto how SSL is managed will potentially impact\
    \ those services that utilize\nthose cryptography frameworks.\n\nVerify that Apache\
    \ is running on the machine.\n\n`systemctl status httpd.service --no-pager`{{execute\
    \ T1}}\n\n<pre class=\"file\">\n<< OUTPUT ABRIDGED >>\n\nActive: active (running)\
    \ since Monday 2019-07-15 19:24:18 EDT; 3h 59min left\n\n<< OUTPUT ABRIDGED >>\n\
    </pre>\n\nVerify that the Active status is __active (running)__.   \n\nBy default,\
    \ Apache stores the automatically created, SSL self-signed\ncertificate at /etc/pki/tls/certs/localhost.crt.\
    \ Verify the length of the \nRSA public key used by the automatically created,\
    \ self-signed SSL certificate \nfile.    \n\n`openssl x509 -in /etc/pki/tls/certs/localhost.crt\
    \ -text | grep bit`{{execute T1}}\n\n<pre class=\"file\">\n                RSA\
    \ Public-Key: (2048 bit)\n</pre>\n\nBy default, Apache uses a certificate with\
    \ a 2048 bit public key.   \n\nUse `openssl` to connect to Apache on the https\
    \ port (443).  As part of this \nconnection, openssl will receive a copy of the\
    \ certificate to encrypt the \nconnection with the service.  You will verify that\
    \ a client web browser is \nutilizing the 2048 bit Public-Key certificate viewed\
    \ above.   \n\n`openssl s_client -connect localhost:443 </dev/null 2>/dev/null\
    \ | grep '^Server public key'`{{execute T1}}\n\n<pre class=\"file\">\nServer public\
    \ key is 2048 bit\n</pre>\n\nClient browsers are provided the 2048 bit key and\
    \ SSL certificate by the \nApache service to encrypt their connection.   \n\n"
  difficulty: basic
  notes:
  - contents: '# Goal:

      After completing this scenario, users will be able to use, modify, and

      troubleshoot changes to Red Hat Enterprise Linux''s system-wide cryptographic

      policy.  The scenario uses the Apache web server as the example application.


      # Concepts included in this scenario:

      * Verify the current system-wide cryptographic policy setting

      * Change the current cryptographic policy setting

      * Troubleshoot applications after a cryptographic policy update

      * Modify application settings to comply with stronger cryptographic policies


      # Example Use case:

      Your security team requires using stronger cryptography algorithms with

      applications and is no longer allowing weaker algorithms, such as SHA-1.

      '
    type: text
  slug: step1
  tabs:
  - hostname: rhel
    title: Terminal
    type: terminal
  - hostname: rhel
    path: /
    port: 9090
    title: RHEL Web Console
    type: service
  timelimit: 60
  title: Step 1
  type: challenge
- assignment: "# Set system-wide cryptographic policy to FUTURE\n\nThe Chief Security\
    \ Officer sends out the following e-mail:\n<pre class=\"file\">\nApplication and\
    \ Infrastructure Administrators,\n\nI recently returned from an industry security\
    \ conference, and at that\nconference, I learned of some recommended security\
    \ industry practices\nthat our Applications and services should be using.  Specifically,\
    \ we\nshould disable some less-secure encryption algorithms and enforce some\n\
    minimum strength used by others.\n\nThose of you that have applications and services\
    \ that utilize asymmetric\nencryption through RSA based certificates, your certificates\
    \ should use\nat least a 3072 bit public key for their cipher.\n\nTLS connections\
    \ should only be offered to clients using TLS version 1.2 \nor higher.  TLS 1.0\
    \ and 1.1 should no longer be used for encrypted\nconnection to services or applications.\n\
    \nApplication and services should now be configured to not use SHA1 for\ndigital\
    \ signatures.\n\nThese changes will allow client data to transit the internet\
    \ in a more\nsecure fashion.\n\n-CSO\n</pre>\n\nAs it happens, all of these requirements\
    \ can be configured and enforced using\nsystem-wide cryptographic policies that\
    \ come with Red Hat Enterprise Linux.\nIn order to comply with the new organization\
    \ policy, you will update the \nsystem to use the **FUTURE** cryptographic policy.\
    \  Changing to the **FUTURE** \npolicy will configure the cryptography libraries\
    \ and services used on the\nmachine or by applications running on the machine\
    \ such that they comply with\nthe requirements set forth by the Chief Security\
    \ Officer above.   \n\n`update-crypto-policies --set FUTURE`{{execute T1}}\n\n\
    <pre class=\"file\">\nSetting system policy to FUTURE\nNote: System-wide crypto\
    \ policies are applied on application start-up.\nIt is recommended to restart\
    \ the system for the change to policies\nto fully take place.\n</pre>\n\nThe change\
    \ will no longer permit some encryption algorithms to be used on the \nmachine,\
    \ SHA1 for digital signatures.  Additionally, RSA based certificates\nrequire\
    \ a public key of at least 3072 bits.  The machine will also now only\noffer TLS\
    \ connections at TLS 1.2 or higher.   \n\nYou can now verify that the new policy,\
    \ FUTURE, has been applied to the system.    \n\n`update-crypto-policies --show`{{execute\
    \ T1}}\n\n<pre class=\"file\">\nFUTURE\n</pre>\n\nIf you are interested in more\
    \ details about the cryptographic policies that\nship with Red Hat Enterprise\
    \ Linux 8:    \n\n`man crypto-policies`\n"
  difficulty: basic
  slug: step2
  tabs:
  - hostname: rhel
    title: Terminal
    type: terminal
  - hostname: rhel
    path: /
    port: 9090
    title: RHEL Web Console
    type: service
  timelimit: 60
  title: Step 2
  type: challenge
- assignment: "# Reconcile service issues\n\nYou will need to restart the Apache service\
    \ after changing the system-wide\ncrypto policy so that it runs under the new\
    \ policy.   \n\n> **NOTE:** Red Hat recommends rebooting the system for all services\
    \ to be\ninitialized with the new cryptographic policy, however, for this exercise\
    \ you\nwill be individually working with the Apache web service.\n\n`systemctl\
    \ restart httpd.service`{{execute T1}}\n\n<pre class=\"file\">\nJob for httpd.service\
    \ failed because the control process exited with error code.\nSee \"systemctl\
    \ status httpd.service\" and \"journalctl -xe\" for details.\n</pre>\n\nThe Apache\
    \ service fails to restart.  You can see a more specific error \nmessage in the\
    \ SSL error log for Apache.  You will further diagnose this\nusing the error messages\
    \ from the command below and reconcile this in \nadditional steps in the exercise.\n\
    \n`tail -2 /var/log/httpd/ssl_error_log`{{execute T1}}\n\n<pre class=\"file\"\
    >\n[Tue Jul 16 15:13:25.580860 2019 ] [ssl:emerg] [pid 8869:tid 140233336588544]\
    \ AH02562: Failed to configure certificate fe80::42:acff:fe11:b:443:0 (with chain),\
    \ check /etc/pki/tls/certs/localhost.crt\n[Tue Jul 16 15:13:25.580860 2019 ] [ssl:emerg]\
    \ [pid 8869:tid 140233336588544] SSL Library Error: error: 140AB18F: SSL routines:\
    \ SSL_CTX_use_certificate:ee key too small\n</pre>\n\n> **NOTE:** Your log date,\
    \ time, process ID, or other metadata may be different.  The important part is\
    \ the message at the end of the entries.\n\nFrom the log data, the error causing\
    \ Apache to not start is caused by the\n/etc/pki/tls/certs/localhost.crt file.\
    \  Recall from the first step, Validate \nthe Environment, that this file contained\
    \ an RSA certificate that used a 2048 \nbit public key.  However, due to the new\
    \ FUTURE policy, RSA certificates now\nrequire a public key of at least 3072 bits.\n\
    \nThe FUTURE system-wide crypto policy is stopping Apache from starting because\n\
    running with the existing certificate, and public key, would violate the policy\n\
    settings.  In the next steps, you will resolve this issue.\n"
  difficulty: basic
  slug: step3
  tabs:
  - hostname: rhel
    title: Terminal
    type: terminal
  - hostname: rhel
    path: /
    port: 9090
    title: RHEL Web Console
    type: service
  timelimit: 60
  title: Step 3
  type: challenge
- assignment: "# Regenerate SSL certificate\n\nTo comply with the system-wide cryptographic\
    \ policy of FUTURE, you will need \nto generate a replacement SSL certificate\
    \ using an RSA key of 3072 bit length,\nor longer. \n\nBefore you create the updated\
    \ SSL certificate, make a backup of your existing\ncertificate files.\n\n`cp /etc/pki/tls/private/localhost.key\
    \ /etc/pki/tls/private/localhost.key.orig`{{execute T1}}\n\n`cp /etc/pki/tls/certs/localhost.crt\
    \ /etc/pki/tls/certs/localhost.crt.orig`{{execute T1}}\n\nNow that you have a\
    \ backup of your original certificates, and could revert to\nthem if something\
    \ unexpected happens, generate a new, replacement SSL\ncertificate and public\
    \ key.  The new RSA certificate will use a public key\nof of 3072 bits.\n\n`openssl\
    \ req -x509 -sha256 -nodes -days 365 -newkey rsa:3072 -subj='/C=XX/O=Default'\
    \ -keyout /etc/pki/tls/private/localhost.key -out /etc/pki/tls/certs/localhost.crt`{{execute\
    \ T1}}\n\n<pre class=\"file\">\nGenerating a RSA private key\n.......................................++++\n\
    ....................+++\nwriting new private key to '/etc/pki/tls/private/localhost.key'\n\
    -----\n</pre>\n\nVerify the bit-length of the key to confirm that it is 3072 bit.\n\
    \n`openssl x509 -in /etc/pki/tls/certs/localhost.crt -text | grep bit`{{execute\
    \ T1}}\n\n<pre class=\"file\">\n                RSA Public-Key: (3072 bit)\n</pre>\n\
    \nNow that a new SSL certificate has been created using a larger public key, \n\
    it complies with the requirements of the  FUTURE cryptographic policy.\n\n> **NOTE:**\
    \ It is recommended practice to use Certificate Authority (CA) issued\ncertificates.\
    \  If you were using a certificate from a Certificate Authority,\nyou would need\
    \ to generate a new Certificate Signature Request (csr) and\nsubmit it to your\
    \ CA.  When you receive the signed certificate from your CA,\nyou would then position\
    \ it, and update any configuration files needed to\nreference it.\n"
  difficulty: basic
  slug: step4
  tabs:
  - hostname: rhel
    title: Terminal
    type: terminal
  - hostname: rhel
    path: /
    port: 9090
    title: RHEL Web Console
    type: service
  timelimit: 60
  title: Step 4
  type: challenge
- assignment: "# Start Apache service with updated certificate\n\nStart the Apache\
    \ service now that the certificates used comply with the\nsystem-wide crypto policy.\
    \  Now that the service complies with the policy,\nit should start without further\
    \ issue.\n\n`systemctl restart httpd.service`{{execute T1}}\n\nYou can verify\
    \ the Apache service is now running again.   \n\n`systemctl status httpd.service\
    \ --no-pager`{{execute T1}}\n\n<pre class=\"file\">\n<< OUTPUT ABRIDGED >>\n\n\
    Active: active (running) since Wed 2019-07-17 09:54:40 EDT; 2s ago\n\n<< OUTPUT\
    \ ABRIDGED >>\n</pre>\n\nNow that the service is running and certificates used\
    \ comply with the FUTURE\nsystem-wide cryptographic policy, connect to the Apache\
    \ service and validate \nthat the new certificate is being offered to client browsers.\
    \   \n\n`openssl s_client -connect localhost:443 </dev/null 2>/dev/null | grep\
    \ '^Server public key'`{{execute T1}}\n\n<pre class=\"file\">\nServer public key\
    \ is 3072 bit\n</pre>\n"
  difficulty: basic
  slug: step5
  tabs:
  - hostname: rhel
    title: Terminal
    type: terminal
  - hostname: rhel
    path: /
    port: 9090
    title: RHEL Web Console
    type: service
  timelimit: 60
  title: Step 5
  type: challenge
description: '# Goal:

  After completing this scenario, users will be able to use, modify, and

  troubleshoot changes to Red Hat Enterprise Linux''s system-wide cryptographic

  policy.  The scenario uses the Apache web server as the example application.


  # Concepts included in this scenario:

  * Verify the current system-wide cryptographic policy setting

  * Change the current cryptographic policy setting

  * Troubleshoot applications after a cryptographic policy update

  * Modify application settings to comply with stronger cryptographic policies


  # Example Use case:

  Your security team requires using stronger cryptography algorithms with

  applications and is no longer allowing weaker algorithms, such as SHA-1.

  '
developers:
- rhel-tmm@redhat.com
icon: https://storage.googleapis.com/instruqt-frontend/img/tracks/default.png
level: beginner
owner: rhel
private: false
published: true
skipping_enabled: false
slug: crypto-policy
tags:
- rhel
title: Configuring the system-wide cryptographic policy
type: track
