challenges:
- assignment: "# Validate the Environment\nUsing the provided system terminal session,\
    \ validate the initial environment.\n\nFirst, verify the current system-wide cryptographic\
    \ policy.\n\n`update-crypto-policies --show`{{execute T1}}\n\n<pre class=\"file\"\
    >\nDEFAULT\n</pre>\n\nThe default configuration on Red Hat Enterprise Linux for\
    \ the system-wide\ncryptographic policy (sometimes referred to as \"crypto policy\"\
    ) is a\npolicy named `DEFAULT`.\n\nSecure Socket Layer (SSL) is one of the cryptography\
    \ methods managed by\nthe system-wide cryptography policy.  Throughout the exercise,\
    \ you will\nwork with SQL Server as it is a service that utilizes SSL.  Hence,\
    \ changes\nto how SSL is managed will potentially impact those services that utilize\n\
    those cryptography frameworks.\n\nVerify that SQL Server is running on the machine.\n\
    \n`systemctl status mssql-server.service --no-pager`{{execute T1}}\n\n<pre class=\"\
    file\">\n<< OUTPUT ABRIDGED >>\n\nActive: active (running) since Monday 2019-07-15\
    \ 19:24:18 EDT; 3h 59min left\n\n<< OUTPUT ABRIDGED >>\n</pre>\n\nVerify that\
    \ the Active status is __active (running)__.\n\nBy default, SQL Server does not\
    \ encrypt connections unless specified by client or configured on the server\n\
    using the forceencryption setting. You can verify that the connection is not encrypted\
    \ by querying the\nsystem DMV in SQL Server(sys.dm_exec_connections).\n\n`/opt/mssql-tools/bin/sqlcmd\
    \ -S localhost -U sa -P Redhat1! -Q \"select session_id, encrypt_option from sys.dm_exec_connections\
    \ where session_id = @@spid\"`{{execute T1}}\n\n<pre class=\"file\">\nsession_id\
    \  encrypt_option\n----------- ----------------------------------------\n    \
    \     XX FALSE\n</pre>\n"
  difficulty: basic
  notes:
  - contents: "# Goal:\nAfter completing this scenario, users will be able to use,\
      \ and modify\nRed Hat Enterprise Linux's system-wide cryptographic policy applied\
      \ to \nMicrosoft SQL Server, and encrypt a database in SQL Server using SQL\
      \ Server's \nTransparent Data Encryption (TDE) feature.\n\n# Concepts included\
      \ in this scenario:\n* Verify the current system-wide cryptographic policy setting\n\
      * Change the current cryptographic policy setting\n* Connect to SQL Server using\
      \ a strongly encrypted TLS connection \n* Configure TDE in SQL Server to encrypt\
      \ a database at rest\n\n# Example Use case:\nYour security team requires using\
      \ stronger cryptography algorithms with\napplications and is no longer allowing\
      \ weaker algorithms with lower bit \nlengths. They also require encryption of\
      \ sensitive data at rest.\n"
    type: text
  slug: step1
  tabs:
  - hostname: rhel
    title: Terminal
    type: terminal
  - hostname: rhel
    path: /
    port: 9090
    title: RHEL Web Console
    type: service
  - hostname: rhel
    path: /root
    title: Visual Editor
    type: code
  timelimit: 50
  title: Step 1
  type: challenge
- assignment: "# Set system-wide cryptographic policy to FUTURE\n\nThe Chief Security\
    \ Officer sends out the following e-mail:\n<pre class=\"file\">\nDatabase and\
    \ Infrastructure Administrators,\n\nI recently returned from an industry security\
    \ conference, and at that\nconference, I learned of some recommended security\
    \ industry practices\nthat our Applications and services should be using.  Specifically,\
    \ we\nshould disable some less-secure encryption algorithms and enforce some\n\
    minimum strength used by others.\n\nThose of you that have applications and services\
    \ that utilize asymmetric\nencryption through RSA based certificates, your certificates\
    \ should use\nat least a 3072 bit public key for their cipher.\n\nAdditionally,\
    \ please ensure that sensitive data in databases is encrypted \nat rest for additional\
    \ protection.\n\n-CSO\n</pre>\n\nAs it happens, these requirements can be configured\
    \ and enforced using\nsystem-wide cryptographic policies that come with Red Hat\
    \ Enterprise Linux, and \nadditional database security controls like TDE in SQL\
    \ Server.\n\nIn order to comply with the new organization policy, you will update\
    \ the \nsystem to use the **FUTURE** cryptographic policy.  Changing to the **FUTURE**\
    \ \npolicy will configure the cryptography libraries and services used on the\n\
    machine or by applications running on the machine such that they comply with\n\
    the requirements set forth by the Chief Security Officer above.   \n\n`update-crypto-policies\
    \ --set FUTURE`{{execute T1}}\n\n<pre class=\"file\">\nSetting system policy to\
    \ FUTURE\nNote: System-wide crypto policies are applied on application start-up.\n\
    It is recommended to restart the system for the change to policies\nto fully take\
    \ place.\n</pre>\n\nYou can now verify that the new policy, FUTURE, has been applied\
    \ to the system.    \n\n`update-crypto-policies --show`{{execute T1}}\n\n<pre\
    \ class=\"file\">\nFUTURE\n</pre>\n\nIf you are interested in more details about\
    \ the cryptographic policies that\nship with Red Hat Enterprise Linux 8:    \n\
    \n`man crypto-policies`{{execute T1}}\n"
  difficulty: basic
  slug: step2
  tabs:
  - hostname: rhel
    title: Terminal
    type: terminal
  - hostname: rhel
    path: /
    port: 9090
    title: RHEL Web Console
    type: service
  - hostname: rhel
    path: /root
    title: Visual Editor
    type: code
  timelimit: 50
  title: Step 2
  type: challenge
- assignment: "# Reconcile service issues\n\nYou will need to restart the Microsoft\
    \ SQL Server service after changing the system-wide\ncrypto policy so that it\
    \ runs under the new policy.   \n\n> **NOTE:** Red Hat recommends rebooting the\
    \ system for all services to be\ninitialized with the new cryptographic policy,\
    \ however, for this exercise you\nwill be individually working with Microsoft\
    \ SQL Server.\n\n`systemctl restart mssql-server.service`{{execute T1}}\n\nNow\
    \ that SQL Server has restarted, let's try connecting to it using -N option of\
    \ sqlcmd to \nindicate that we want to request an encrypted connection to the\
    \ server.\n\n`/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P Redhat1! -N`{{execute\
    \ T1}}\n\n<pre class=\"file\">\nSqlcmd: Error: Microsoft ODBC Driver 17 for SQL\
    \ Server : SSL Provider: [error:1416F086:SSL routines:tls_process_server_certificate:certificate\
    \ verify failed:EE certificate key too weak]\n</pre>\n\n> **NOTE:** The important\
    \ part is the message at the end indicating certificate key too weak.\n\nDue to\
    \ the new FUTURE policy, RSA certificates now require a public key of at least\
    \ 3072 bits.\nThe FUTURE system-wide crypto policy is stopping sqlcmd from establishing\
    \ a connection with the \nserver since running with the existing server certificate,\
    \ and public key, would violate the policy\nsettings.  In the next steps, you\
    \ will resolve this issue.\n"
  difficulty: basic
  slug: step3
  tabs:
  - hostname: rhel
    title: Terminal
    type: terminal
  - hostname: rhel
    path: /
    port: 9090
    title: RHEL Web Console
    type: service
  - hostname: rhel
    path: /root
    title: Visual Editor
    type: code
  timelimit: 50
  title: Step 3
  type: challenge
- assignment: "# Regenerate SSL certificate\n\nTo comply with the system-wide cryptographic\
    \ policy of FUTURE, you will need \nto generate a replacement SSL certificate\
    \ using an RSA key of at least 3072 bit \nlength, or longer. \n\nMake directory\
    \ for private key\n`mkdir /etc/ssl/private/`{{execute T1}} \n\nThe new RSA certificate\
    \ will use a public key of 4096 bits.\n`openssl req -x509 -nodes -newkey rsa:4096\
    \ -subj \"/CN=${HOSTNAME}\" -keyout /etc/ssl/private/mssql.key -out /etc/ssl/certs/mssql.pem\
    \ -days 365`{{execute T1}}\n\n<pre class=\"file\">\nGenerating a RSA private key\n\
    .......................................................++++\n..............................................++++\n\
    writing new private key to 'mssql.key'\n-----\n</pre>\n\nChange the owner of the\
    \ key files to the mssql user and group\n`chown mssql:mssql /etc/ssl/private/mssql.key\
    \ /etc/ssl/certs/mssql.pem`{{execute T1}}\n\nVerify the bit-length of the key\
    \ to confirm that it is 4096 bit.\n\n`openssl x509 -in /etc/ssl/certs/mssql.pem\
    \ -text | grep bit`{{execute T1}}\n\n<pre class=\"file\">\n                RSA\
    \ Public-Key: (4096 bit)\n</pre>\n\nNow that a new SSL certificate has been created\
    \ using a larger public key, \nit complies with the requirements of the  FUTURE\
    \ cryptographic policy.\n\n> **NOTE:** It is recommended practice to use Certificate\
    \ Authority (CA) issued\ncertificates.  If you were using a certificate from a\
    \ Certificate Authority,\nyou would need to generate a new Certificate Signature\
    \ Request (csr) and\nsubmit it to your CA.  When you receive the signed certificate\
    \ from your CA,\nyou would then position it, and update any configuration files\
    \ needed to\nreference it.\n"
  difficulty: basic
  slug: step4
  tabs:
  - hostname: rhel
    title: Terminal
    type: terminal
  - hostname: rhel
    path: /
    port: 9090
    title: RHEL Web Console
    type: service
  - hostname: rhel
    path: /root
    title: Visual Editor
    type: code
  timelimit: 50
  title: Step 4
  type: challenge
- assignment: "# Connect to SQL Server with updated certificate\n\nTune SQL Server\
    \ configuration to read the new key files, and force encryption only from client\n\
    * Set the network.tlscert configuration variable to point to the public key\n\
    \    * `/opt/mssql/bin/mssql-conf set network.tlscert /etc/ssl/certs/mssql.pem`{{execute\
    \ T1}} \n* Set the network.tlskey configuration variable to point to the private\
    \ key\n    * `/opt/mssql/bin/mssql-conf set network.tlskey /etc/ssl/private/mssql.key`{{execute\
    \ T1}} \n* Set the network.forceencryption configuration variable to 1 (initiated\
    \ by client)\n    * `/opt/mssql/bin/mssql-conf set network.forceencryption 1`{{execute\
    \ T1}} \n\nRestart the SQL Server service\n`systemctl restart mssql-server.service`{{execute\
    \ T1}}\n\nNow that the service certificates comply with the policy, the client\
    \ should be able to connect\nwithout any issue, and the connection should be encrypted\n\
    \n`/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P Redhat1! -N -C -Q \"select\
    \ session_id, encrypt_option from sys.dm_exec_connections where session_id = @@spid\"\
    `{{execute T1}}\n\n<pre class=\"file\">\nsession_id  encrypt_option\n-----------\
    \ ----------------------------------------\n         XX TRUE\n\n(1 rows affected)\n\
    </pre>\n"
  difficulty: basic
  slug: step5
  tabs:
  - hostname: rhel
    title: Terminal
    type: terminal
  - hostname: rhel
    path: /
    port: 9090
    title: RHEL Web Console
    type: service
  - hostname: rhel
    path: /root
    title: Visual Editor
    type: code
  timelimit: 50
  title: Step 5
  type: challenge
- assignment: "# Working with Transparent Data Encryption in SQL Server\n\nBefore\
    \ we explore Transparent Data Encryption (TDE) in SQL Server, it's important to\
    \ understand the\nunderlying key hierarchy used by SQL Server. Each layer is encrypted\
    \ by the one above it \u2013 the user data is encrypted by the database encryption\
    \ key (DEK), which is a symmetric key, and the DEK is encrypted by the certificate,\
    \ whose private key portion is encrypted by the master key, which is encrypted\
    \ with a user-specified password.\n\n![](./assets/Image-TDE.png)\n\n\nLet's first\
    \ open up the sqlcmd shell prompt connected to the master database. The master\
    \ database contains all of the system level information for SQL Server. It gets\
    \ created when the server instance of SQL Server is created. \n\n`/opt/mssql-tools/bin/sqlcmd\
    \ -S localhost -U sa -P Redhat1! -d master -N -C`{{execute T1}}\n\nUse master\
    \ database to setup the master encryption key.\n\n`CREATE MASTER KEY ENCRYPTION\
    \ BY PASSWORD = '1Password!'`{{execute T1}}\n\nThe GO keyword is the default batch\
    \ terminator in SQL Server, allowing a set of commands to run as a batch.\n`GO`{{execute\
    \ T1}}\n\n> **NOTE:** It is recommended practice to backup the master key as soon\
    \ as it is created, and store the backup in a secure, off-site location. To backup\
    \ the master key, use the *BACKUP MASTER KEY* statement in SQL Server.\n\nCreate\
    \ a certificate in the master database \n\n`CREATE CERTIFICATE MyServerCert WITH\
    \ SUBJECT = 'My Database Encryption Key Certificate'`{{execute T1}}\n`GO`{{execute\
    \ T1}}\n\nCreate a database called TestDB to be encrypted \n`CREATE DATABASE TestDB`{{execute\
    \ T1}}\n`GO`{{execute T1}}\n\nSwitch to the TestDB database \n`USE TestDB`{{execute\
    \ T1}}\n`GO`{{execute T1}}\n\nCreate database encryption key (DEK) with AES_256\
    \ algorithm and encrypted by server certificate. The DEK is designed to actually\
    \ encrypt and decrypt the data in your data, log and backup files when you use\
    \ TDE. The DEK is protected with a certificate. This can be a purchased or self-signed\
    \ certificate, but in either case, the certificate must reside in the master database\
    \ of the instance hosting the TDE encrypted database such as the certificate created\
    \ in the previous step.\n\n`CREATE DATABASE ENCRYPTION KEY WITH ALGORITHM = AES_256\
    \ ENCRYPTION BY SERVER CERTIFICATE MyServerCert`{{execute T1}}\n`GO`{{execute\
    \ T1}}\n\n> **NOTE:** You will notice a warning message after creating the DEK\
    \ to backup the certificate. In order protect the data from a failure event; make\
    \ sure to back-up the certificate. It is recommended practice to backup the certificate\
    \ as soon as it is created, and store the backup in a secure, off-site location.\
    \ To backup the certificate, use the *BACKUP CERTIFICATE* statement in SQL Server.\n\
    \nTurn ON database encryption\n`ALTER DATABASE TestDB SET ENCRYPTION ON`{{execute\
    \ T1}}\n`GO`{{execute T1}}\n\nList the databases that are encrypted. Encrypted_state\
    \ = 3 means these databases are in encrypted state\n`SELECT a.name from sys.dm_database_encryption_keys\
    \ b join sys.databases a on a.database_id = b.database_id WHERE encryption_state\
    \ = 3`{{execute T1}}\n`GO`{{execute T1}}\n\n<pre class=\"file\">\nname\n-----------------------------------------------\n\
    tempdb\nTestDB\n</pre>\n\nThe **tempdb** system database will be encrypted if\
    \ any other database on the instance of SQL Server is encrypted by using TDE.\
    \ This is because query processing in SQL Server could use tempdb  for sort spills\
    \ and hash joins. In such cases, you also want tempdb to be encrypted along with\
    \ the other encrypted databases.\n\nYou can exit the sqlcmd shell using the exit\
    \ statement\n`exit`{{execute T1}}\n"
  difficulty: basic
  slug: step6
  tabs:
  - hostname: rhel
    title: Terminal
    type: terminal
  - hostname: rhel
    path: /
    port: 9090
    title: RHEL Web Console
    type: service
  - hostname: rhel
    path: /root
    title: Visual Editor
    type: code
  timelimit: 50
  title: Step 6
  type: challenge
description: "# Goal:\nAfter completing this scenario, users will be able to use,\
  \ and modify\nRed Hat Enterprise Linux's system-wide cryptographic policy applied\
  \ to \nMicrosoft SQL Server, and encrypt a database in SQL Server using SQL Server's\
  \ \nTransparent Data Encryption (TDE) feature.\n\n# Concepts included in this scenario:\n\
  * Verify the current system-wide cryptographic policy setting\n* Change the current\
  \ cryptographic policy setting\n* Connect to SQL Server using a strongly encrypted\
  \ TLS connection \n* Configure TDE in SQL Server to encrypt a database at rest\n\
  \n# Example Use case:\nYour security team requires using stronger cryptography algorithms\
  \ with\napplications and is no longer allowing weaker algorithms with lower bit\
  \ \nlengths. They also require encryption of sensitive data at rest.\n"
developers:
- rhel-tmm@redhat.com
icon: https://storage.googleapis.com/instruqt-frontend/img/tracks/default.png
level: beginner
owner: rhel
private: false
published: true
skipping_enabled: false
slug: sql-server-crypto-policy
tags:
- rhel
title: Red Hat Enterprise Linux Crypto Policy and Transparent Data Encryption (TDE)
  With SQL Server
type: track
