challenges:
- assignment: '# Creating an application image from an existing base


    **Buildah** has two main ways to create images:

    * Using subcommands to modify contents

    * Using host tools to modify a container filesystem


    First, we''ll look at using subcommands to modify the container contents before
    saving an image.  Many **buildah** subcommands act like directives from a Containerfile.  This
    allows for a familiar experience while automating builds.


    The Red Hat Enterprise Linux 8 Universal Base Image is provided as the starting
    point for creating containers with Red Hat Enterprise Linux packages.  More information
    on UBI can be found in the [introductory blog post.](https://www.redhat.com/en/blog/introducing-red-hat-universal-base-image)


    To build an application container from the `ubi-init` base image, we will create
    a working container with `buildah`.  A working container is a temporary container
    used as the target for buildah commands.


    `buildah from registry.access.redhat.com/ubi8/ubi-init`{{execute T1}}


    <pre class="file">

    ubi-init-working-container

    </pre>


    This subcommand acts like the FROM directive in a Containerfile and makes the
    source image available on the host.


    Buildah will append `-working-container` to the image name used.  If that name
    already exists, a number will also be appended.

    '
  difficulty: basic
  notes:
  - contents: 'After completing this scenario, users will be able to build images
      from scratch or existing base images using **buildah** and other host based
      tools.


      # Concepts included in this scenario:

      * Initializing a working container for image building

      * Using buildah commands to modify a working container

      * Modfiying a working container with standard system tools

      * Creating an application image from a working container


      # Example Usecase:

      Using *podman* with a Containerfile or Dockerfile input is a common way to build
      containers from base images. However, this lab, Building containers with **buildah**,
      provides better control over layer creation and image contents.


      > _NOTE:_ Throughout these steps there are UUIDs in output blocks that may not
      match your output exactly.

      '
    type: text
  slug: step1
  tabs:
  - hostname: rhel
    title: CLI
    type: terminal
  - hostname: rhel
    path: /
    port: 30001
    title: Web Console
    type: service
  timelimit: 100
  title: Step 1
  type: challenge
- assignment: "# Creating an application image from an existing base\n\nThe `ubi-init`\
    \ image is very complete, including tools like `yum` and `systemd`.  You can install\
    \ `httpd` via `yum` in the container using the `buildah run` subcommand.  \n\n\
    `buildah run ubi-init-working-container -- yum -y install httpd`{{execute T1}}\n\
    \n<pre class=\"file\">\nUpdating Subscription Management repositories.\nUnable\
    \ to read consumer identity\nThis system is not registered to Red Hat Subscription\
    \ Management. You can use subscription-manager to register.\nRed Hat Enterprise\
    \ Linux 8 for x86_64 - AppStream (RPMs)               2.4 MB/s | 7.0 MB     00:02\n\
    Red Hat Enterprise Linux 8 for x86_64 - BaseOS (RPMs)                  1.3 MB/s\
    \ | 3.7 MB     00:02\nRed Hat Enterprise Linux 8 for x86_64 - Supplementary (RPMs)\
    \            23 kB/s |  78 kB     00:03\nLast metadata expiration check: 0:00:01\
    \ ago on Fri 17 May 2019 03:41:34 PM EDT.\nDependencies resolved.\n=======================================================================================================\n\
    \ Package                 Arch   Version                         Repository  \
    \                      Size\n=======================================================================================================\n\
    Installing:\n httpd                   x86_64 2.4.37-30.module+el8.0.0+2969+90015743\n\
    \                                                                rhel-8-for-x86_64-appstream-rpms\
    \ 1.4 M\n\n<< OUTPUT ABRIDGED >>\n\nComplete!\n</pre>\n\nThis subcommand acts\
    \ like the RUN directive in an Containerfile.  Since the `yum` command includes\
    \ a switch, we need to use the `--` syntax to tell `buildah run` there are no\
    \ buildah options to look for past this point.\n\nOnce the packages are installed\
    \ in the working container, enable `httpd` to start when the container is run\
    \ via systemd using the `buildah run` subcommand.\n\n`buildah run ubi-init-working-container\
    \ -- systemctl enable httpd`{{execute T1}}\n\n<pre class=\"file\">\nCreated symlink\
    \ /etc/systemd/system/multi-user.target.wants/httpd.service \u2192 /usr/lib/systemd/system/httpd.service.\n\
    </pre>\n\nDeploying web content to the container image can be done using the `buildah\
    \ copy` subcommand.  \n\n`buildah copy ubi-init-working-container index1.html\
    \ /var/www/html/index.html`{{execute T1}}\n\nThis subcommand acts like the COPY\
    \ directive in a Containerfile.  \n\nTo expose the web server port and set systemd\
    \ to start when the container is run, modify the metadata with the `buildah config`\
    \ subcommand.  \n\n`buildah config --port 80 --cmd \"/usr/sbin/init\" ubi-init-working-container`{{execute\
    \ T1}}\n\nThese options to `buildah config` are equivalent to the EXPOSE and CMD\
    \ directives in a Containerfile.\n\n> _NOTE:_  As we're using systemd to start\
    \ the service, use the `--cmd` option not `--entrypoint`.\n\nOnce the contents\
    \ of the working container are complete, and the metadata has been updated, save\
    \ the working container as the target application image using `buildah commit`.\
    \  \n\n`buildah commit ubi-init-working-container el-httpd1`{{execute T1}}\n\n\
    <pre class=\"file\">\nGetting image source signatures\nSkipping fetch of repeat\
    \ blob sha256:24d85c895b6b870f6b84327a5e31aa567a5d30588de0a0bdd9a669ec5012339c\n\
    Skipping fetch of repeat blob sha256:c613b100be1645941fded703dd6037e5aba7c9388fd1fcb37c2f9f73bc438126\n\
    Skipping fetch of repeat blob sha256:188ab351dfda8afc656a38073df0004cdc5196fd5572960ff5499c17e6442223\n\
    Copying blob sha256:8df24355b15ad293a5dd60d0fe2c14dca68b0412b62f9e9c39c15bb8230d1936\n\
    \ 26.80 MiB / 26.80 MiB [====================================================]\
    \ 0s\nCopying config sha256:b04fe2c73b034e657da2fee64c340c56086a38265777556fa8a02c5f12896e66\n\
    \ 2.42 KiB / 2.42 KiB [======================================================]\
    \ 0s\nWriting manifest to image destination\nStoring signatures\nb04fe2c73b034e657da2fee64c340c56086a38265777556fa8a02c5f12896e66\n\
    </pre>\n\nIn this example, each previous `buildah` subcommand results in a separate\
    \ layer, much like building using a Containerfile.\n"
  difficulty: basic
  slug: step2
  tabs:
  - hostname: rhel
    title: CLI
    type: terminal
  - hostname: rhel
    path: /
    port: 30001
    title: Web Console
    type: service
  timelimit: 100
  title: Step 2
  type: challenge
- assignment: "# Launching and inspecting the application container\n\nMore information\
    \ on managing containers with `podman` can be found in the [\"Deploying containers\
    \ with container tools\"](https://lab.redhat.com/podman-deploy) scenario.\n\n\
    Inspect the images available on the host using `podman images`\n\n`podman images`{{execute\
    \ T1}}\n\n<pre class=\"file\">\nREPOSITORY                                 TAG\
    \      IMAGE ID       CREATED          SIZE\nlocalhost/el-httpd1             \
    \           latest   b04fe2c73b03   24 seconds ago   279 MB\nregistry.access.redhat.com/ubi8/ubi-init\
    \   latest   8c376a94293d   2 weeks ago      231 MB\n</pre>\n\nNote the name matches\
    \ what was set using `buildah commit`.\n\n`Podman` and `buildah` use the same\
    \ storage locations on the host, which lets us immediately run the image we just\
    \ built via `podman`.  \n\n`podman run -d -p 80:80 el-httpd1`{{execute T1}}\n\n\
    <pre class=\"file\">\nf4d9db69e9b512517f9490d3bcc5096e69cca5e9b3a50b3890430da39ae46573\n\
    </pre>\n\nCheck the status of the application container using `podman`.  \n\n\
    `podman ps`{{execute T1}}\n\n<pre class=\"file\">\nCONTAINER ID  IMAGE       \
    \                COMMAND     CREATED         STATUS             PORTS        \
    \       NAMES\nf4d9db69e9b5  localhost/el-httpd1:latest  /sbin/init  16 seconds\
    \ ago  Up 16 seconds ago  0.0.0.0:80->80/tcp  relaxed_wilson\n</pre>\n\nNote the\
    \ ports and command match the metadata set using `buildah config`.  \n\nInspect\
    \ the image metadata for the application container using `buildah inspect`.\n\n\
    `buildah inspect localhost/el-httpd1`{{execute T1}}\n\n<pre class=\"file\">\n\"\
    rootfs\": {\n    \"type\": \"layers\",\n    \"diff_ids\": [\n        \"sha256:24d85c895b6b870f6b84327a5e31aa567a5d30588de0a0bdd9a669ec5012339c\"\
    ,\n        \"sha256:c613b100be1645941fded703dd6037e5aba7c9388fd1fcb37c2f9f73bc438126\"\
    ,\n        \"sha256:188ab351dfda8afc656a38073df0004cdc5196fd5572960ff5499c17e6442223\"\
    ,\n        \"sha256:2aa09f066ed0ce8aad332cbefe237cbe05777f5790bccfdcda439aff5f5f7509\"\
    \n    ]\n},\n</pre>\n\nLook for the `rootfs` section in the JSON output. You will\
    \ see layers for each of the `buildah` subcommands run.  \n\nClick on the ***Container\
    \ httpd*** tab to see the index.html deployed into the application container.\n\
    \nStop all running containers before moving to the next step:\n\n`podman stop\
    \ -a`{{execute T1}}\n"
  difficulty: basic
  slug: step3
  tabs:
  - hostname: rhel
    title: CLI
    type: terminal
  - hostname: rhel
    path: /
    port: 30001
    title: Web Console
    type: service
  timelimit: 100
  title: Step 3
  type: challenge
- assignment: "# Creating an application image from scratch\n\nStarting from an existing\
    \ base container isn't the only option available to `buildah`.  `Buildah` can\
    \ create a minimal container image that contains metadata and a filesystem stub.\
    \   \n\nTo create this style of image use the `scratch` special target for `buildah\
    \ from`.\n\n`buildah from scratch`{{execute T1}}\n\n<pre class=\"file\">\nworking-container\n\
    </pre>\n\nSince there's no starting image, the working container will be called\
    \ `working-container`.\n\nWe can start working with the scratch container using\
    \ tools on the host by mounting the container filesystem on the host using `buildah\
    \ mount`.\n\n> _NOTE:_ We capture the output of the `buildah` command in the variable\
    \ *scratchmnt* to make it easier to work with the filesystem path in these exercises.\n\
    \n`scratchmnt=$(buildah mount working-container)`{{execute T1}}\n\n`echo ${scratchmnt}`{{execute\
    \ T1}}\n\n<pre class=\"file\">\n/var/lib/containers/storage/overlay/5199b9cbf441fe93e3629f9d6336fd7008858b9b6e23629a724ccc2f567f3feb/merged\n\
    </pre>\n\nRight now, that directory is empty.\n\n`ls -l ${scratchmnt}`{{execute\
    \ T1}}\n\n<pre class=\"file\">\ntotal 0\n</pre>\n"
  difficulty: basic
  slug: step4
  tabs:
  - hostname: rhel
    title: CLI
    type: terminal
  - hostname: rhel
    path: /
    port: 30001
    title: Web Console
    type: service
  timelimit: 100
  title: Step 4
  type: challenge
- assignment: "# Creating an application image from scratch\n\nIn order to install\
    \ `httpd` in the scratch container, use `yum` on the host with the `installroot`\
    \ option targeting the mount point of the container's filesystem.  \n\n> _NOTE:_\
    \ Setting the `releasever` and `module_platform_id` are required as this will\
    \ be operating in a chroot environment where `yum` config files are not available.\n\
    \n`yum install --installroot ${scratchmnt} httpd --releasever 8 --setopt=module_platform_id=\"\
    platform:el8\" -y`{{execute T1}}\n\n<pre class=\"file\">\nUpdating Subscription\
    \ Management repositories.\nUnable to read consumer identity\nThis system is not\
    \ registered to Red Hat Subscription Management. You can use subscription-manager\
    \ to register.\nRed Hat Enterprise Linux 8 for x86_64 - AppStream (RPMs)     \
    \          2.4 MB/s | 7.0 MB     00:02\nRed Hat Enterprise Linux 8 for x86_64\
    \ - BaseOS (RPMs)                  1.3 MB/s | 3.7 MB     00:02\nRed Hat Enterprise\
    \ Linux 8 for x86_64 - Supplementary (RPMs)            23 kB/s |  78 kB     00:03\n\
    Last metadata expiration check: 0:00:01 ago on Fri 17 May 2019 03:41:34 PM EDT.\n\
    Dependencies resolved.\n=======================================================================================================\n\
    \ Package                 Arch   Version                         Repository  \
    \                      Size\n=======================================================================================================\n\
    Installing:\n httpd                   x86_64 2.4.37-11.module+el8.0.0+2969+90015743\n\
    \                                                                rhel-8-for-x86_64-appstream-rpms\
    \ 1.4 M\n\n<< OUTPUT ABRIDGED >>\n\nComplete!\n</pre>\n\nMany more packages required\
    \ than using the base image, but we have `httpd` and `systemd` but not other tools\
    \ like `yum`.  \n\nTo enable `httpd` to start when the container is run using\
    \ systemd, we can use the container mount point like a normal `chroot`.\n\n`chroot\
    \ ${scratchmnt} systemctl enable httpd`{{execute T1}}\n\n<pre class=\"file\">\n\
    Created symlink /etc/systemd/system/multi-user.target.wants/httpd.service \u2192\
    \ /usr/lib/systemd/system/httpd.service.\n</pre>\n\nDeploying web content to the\
    \ container image can be done using a `cp` command on the host to the working\
    \ container mount point.\n\n`cp index2.html ${scratchmnt}/var/www/html/index.html`{{execute\
    \ T1}}\n\nAfter installing packages and adding the index file, unmount the filesystem\
    \ with the `buildah unmount` subcommand.\n\n`buildah unmount working-container`{{execute\
    \ T1}}\n\n<pre class=\"file\">\nb0ace0c1867f080c790357dd0c606c6919c163c308065c2323d3ddc148740eb1\n\
    </pre>\n\nTo expose the web server port and set systemd to start when the container\
    \ is run, modify the metadata with the `buildah config` subcommand.  \n\n`buildah\
    \ config --port 80 --cmd \"/usr/sbin/init\" working-container`{{execute T1}}\n\
    \nThese options to `buildah config` are equivalent to the EXPOSE and CMD directives\
    \ in a Containerfile.\n\n> _NOTE:_  As we're using systemd to start the service,\
    \ use the `--cmd` option not `--entrypoint`.\n\nOnce the contents of the working\
    \ container are complete, and the metadata has been updated, save the working\
    \ container as the target application image using `buildah commit`.\n\n`buildah\
    \ commit working-container el-httpd2`{{execute T1}}\n\n<pre class=\"file\">\n\
    Getting image source signatures\nCopying blob sha256:273497ce3451052db7cc333d8e90c259314f9cb8d6d4f7a5b865656f65c24083\n\
    \ 162.17 MiB / 162.17 MiB [==================================================]\
    \ 6s\nCopying config sha256:a3c678a7d7c63edbac6e57a86da11ff4d916c0734bcbea9cfd55ae2b515275b9\n\
    \ 308 B / 308 B [============================================================]\
    \ 0s\nWriting manifest to image destination\nStoring signatures\na3c678a7d7c63edbac6e57a86da11ff4d916c0734bcbea9cfd55ae2b515275b9\n\
    </pre>\n\nIn this example, all operations were done directly to the container\
    \ filesystem, resulting in a single layer.  The `buildah commit` step can be run\
    \ at any point where a layer is needed, for example to cache a common set of packages\
    \ across multiple applications.\n"
  difficulty: basic
  slug: step5
  tabs:
  - hostname: rhel
    title: CLI
    type: terminal
  - hostname: rhel
    path: /
    port: 30001
    title: Web Console
    type: service
  timelimit: 100
  title: Step 5
  type: challenge
- assignment: "# Launching and inspecting the application container\n\nMore information\
    \ on managing containers with `podman` can be found in the [\"Deploying containers\
    \ with container tools\"](https://lab.redhat.com/podman-deploy) scenario.\n\n\
    Inspect the images available on the host using `podman images`\n\n`podman images`{{execute\
    \ T1}}\n\n<pre class=\"file\">\nREPOSITORY                                 TAG\
    \      IMAGE ID       CREATED              SIZE\nlocalhost/el-httpd2         \
    \               latest   d074aab93289   About a minute ago   505 MB\nlocalhost/el-httpd1\
    \                        latest   b04fe2c73b03   6 minutes ago        279 MB\n\
    registry.access.redhat.com/ubi8-init       latest   8c376a94293d   2 weeks ago\
    \          231 MB\n</pre>\n\nNote the name matches what was set using `buildah\
    \ commit`.\n\n`Podman` and `buildah` use the same storage locations on the host,\
    \ which lets us immediately run the image we just built via `podman`.  \n\n`podman\
    \ run -d -p 80:80 el-httpd2`{{execute T1}}\n\n<pre class=\"file\">\n561019c2a69fd3826bcaf4a62240ba2b5edd542e664bd2fee0381da746d58d95\n\
    </pre>\n\nCheck the status of the application container using `podman`.  \n\n\
    `podman ps`{{execute T1}}\n\n<pre class=\"file\">\nCONTAINER ID  IMAGE       \
    \                COMMAND     CREATED         STATUS             PORTS        \
    \       NAMES\n561019c2a69f  localhost/el-httpd2:latest  /sbin/init  13 seconds\
    \ ago  Up 13 seconds ago  0.0.0.0:80->80/tcp  suspicious_sammet\n</pre>\n\nNote\
    \ the ports and command match the metadata set using `buildah config`.  \n\nInspect\
    \ the image metadata for the application container using `buildah inspect`.\n\n\
    `buildah inspect localhost/el-httpd2`{{execute T1}}\n\n<pre class=\"file\">\n\"\
    rootfs\": {\n            \"type\": \"layers\",\n            \"diff_ids\": [\n\
    \                \"sha256:6d0bba8b32ffa211bb78d415b96d67dd7955cb30b1f86555d9c9f0da9a914626\"\
    \n            ]\n        },\n</pre>\n\nLook for the `rootfs` section in the JSON\
    \ output. You will see the single layer created by the `buildah commit` subcommand.\n\
    \nClick on the ***Container httpd*** tab to see the index.html deployed into the\
    \ application container.  \n\n>_NOTE:_ You may need to hit the *refresh* icon\
    \ to see the new page.\n"
  difficulty: basic
  slug: step6
  tabs:
  - hostname: rhel
    title: CLI
    type: terminal
  - hostname: rhel
    path: /
    port: 30001
    title: Web Console
    type: service
  timelimit: 100
  title: Step 6
  type: challenge
description: 'After completing this scenario, users will be able to build images from
  scratch or existing base images using **buildah** and other host based tools.


  # Concepts included in this scenario:

  * Initializing a working container for image building

  * Using buildah commands to modify a working container

  * Modfiying a working container with standard system tools

  * Creating an application image from a working container


  # Example Usecase:

  Using *podman* with a Containerfile or Dockerfile input is a common way to build
  containers from base images. However, this lab, Building containers with **buildah**,
  provides better control over layer creation and image contents.


  > _NOTE:_ Throughout these steps there are UUIDs in output blocks that may not match
  your output exactly.

  '
developers:
- dopinto@redhat.com
icon: https://logodix.com/logo/1910931.png
level: beginner
owner: rhel
private: false
published: true
skipping_enabled: false
slug: buildah
tags:
- rhel
title: Creating images with Container Tools [buildah]
type: track
