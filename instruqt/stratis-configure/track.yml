challenges:
- assignment: "# Install Stratis\n\nStratis consists of two components.\n\nFirst,\
    \ the Stratis daemon, stratisd:\n* manages collections of block devices\n* provides\
    \ a D-Bus API\n\nSecond, the Stratis command-line interface, stratis-cli:\n* uses\
    \ the D-Bus API to communicate with stratisd\n\nTo start off, install the stratisd\
    \ and stratis-cli packages using a software package manager.\n\n```\nyum -y install\
    \ stratisd stratis-cli\n```\n\nYou can check the stratis-cli version.\n\n```\n\
    stratis --version\n```\n\n<pre class=\"file\">\n 2.3.0\n</pre>\n"
  difficulty: basic
  notes:
  - contents: '# Overview:


      Stratis is a local storage-management solution for Linux that can assist with
      the initial configuration and ongoing management of storage. Stratis incorporates
      a simple and easy to use interface, while simultaneously providing the advanced
      capabilities of a volume managing filesystem.


      Stratis provides a variety of storage management features by integrating layers
      of existing technologies:

      * the device mapper framework

      * the XFS filesystem


      Stratis automates the management of local storage. On a system with just a single
      disk, Stratis can make it more convenient to logically separate /home from /usr,
      and enable snapshot with rollback on each separately. On larger configurations,
      Stratis can make it easier to create a multi-disk, multi-tiered storage pool,
      monitor the pool, and then manage the pool with less administrator effort.


      # Goal:


      After completing this scenario, users will be able to manage local storage with
      the Stratis CLI.


      # Concepts included in this scenario:


      * Installing, enabling, and starting Stratis

      * Locating empty block devices

      * Creating pools and filesystems

      * Adding block devices to an existing pool

      * Creating snapshots of a filesystem

      '
    type: text
  slug: step1
  tabs:
  - hostname: rhel
    title: Terminal
    type: terminal
  - hostname: rhel
    path: /
    port: 9090
    title: RHEL Web Console
    type: service
  timelimit: 37
  title: Step 1
  type: challenge
- assignment: "# Enable and Start the Stratis Daemon\n\nNow, enable and start the\
    \ stratisd systemd service using the `systemctl` utility.\n\n```\nsystemctl --now\
    \ enable stratisd\n```\n\nAt any point, you may also check the status of stratisd.\n\
    \n```\nsystemctl status stratisd --no-pager\n```\n\n<pre class=\"file\">\n stratisd.service\
    \ - A daemon that manages a pool of block devices to create flexible file systems\n\
    \ Loaded: loaded (/usr/lib/systemd/system/stratisd.service; enabled; vendor preset:\
    \ enabled)\n Active: active (running) since Thu 2020-05-07 15:11:21 EDT; 1s ago\n\
    \n<< OUTPUT ABRIDGED >>\n</pre>\n\nIf stratisd is running, you should see the\
    \ Active: information report `active (running)` as it is shown in the above output\
    \ from the `systemctl status` command.\n\nAdditionally, you can connect to the\
    \ running daemon and have it report its version.\n\n```\nstratis daemon version\n\
    ```\n\n<pre class=\"file\">\n 2.3.0\n</pre>\n\nIn the above output, the daemon\
    \ reports that the version of stratisd is 2.3.0.\n"
  difficulty: basic
  slug: step2
  tabs:
  - hostname: rhel
    title: Terminal
    type: terminal
  - hostname: rhel
    path: /
    port: 9090
    title: RHEL Web Console
    type: service
  timelimit: 37
  title: Step 2
  type: challenge
- assignment: "# Locate empty block devices\n\nA block storage device (or block device)\
    \ is a device that can read and write data in \u201Cblocks\u201D of a given size.\n\
    You will need to obtain empty block devices for this tutorial.\n\nTo do that,\
    \ first use the `lsblk` utility to view a list of block devices on your machine.\n\
    \n```\nlsblk\n```\n\n<pre class=\"file\">\nNAME \_ \_ \_ \_ \_MAJ:MIN RM \_SIZE\
    \ RO TYPE MOUNTPOINT\nsr0 \_ \_ \_ \_ \_ \_11:0 \_ \_1 \_7.3G \_0 rom\nvda \_\
    \ \_ \_ \_ \_ 252:0 \_ \_0 39.1G \_0 disk\n\u251C\u2500vda1 \_ \_ \_ \_252:1 \_\
    \ \_0 \_ \_1G \_0 part /boot\n\u2514\u2500vda2 \_ \_ \_ \_252:2 \_ \_0 38.1G \_\
    0 part\n\_ \u251C\u2500rhel-root 253:0 \_ \_0 34.2G \_0 lvm \_/\n\_ \u2514\u2500\
    rhel-swap 253:1 \_ \_0 \_3.9G \_0 lvm \_[SWAP]\n</pre>\n\nFrom the above output,\
    \ you can see that the two existing block devices on the machine, /dev/vda1 and\
    \ /dev/vda2, are currently in use for /boot and logical volumes rhel-root and\
    \ rhel-swap, respectively.\n\nTherefore, in this lab, you will instead create\
    \ a 10 GiB file within the existing root filesystem and access that space through\
    \ the looback interface.\n\n```\ntruncate -s 10g /tmp/myfile.trunc\n```\n\n```\n\
    losetup /dev/loop1 /tmp/myfile.trunc\n```\n\nVerify that the loopback device has\
    \ been created.\n\n```\nlsblk\n```\n\n<pre class =\"file\">\n NAME          MAJ:MIN\
    \ RM  SIZE RO TYPE MOUNTPOINT\n loop1           7:1    0   10G  0 loop\n sr0 \
    \           11:0    1  7.3G  0 rom\n vda           252:0    0 39.1G  0 disk\n\
    \ \u251C\u2500vda1        252:1    0    1G  0 part /boot\n \u2514\u2500vda2  \
    \      252:2    0 38.1G  0 part\n   \u251C\u2500rhel-root 253:0    0 34.2G  0\
    \ lvm  /\n   \u2514\u2500rhel-swap 253:1    0  3.9G  0 lvm  [SWAP]\n</pre>\n\n\
    From the above output, you can see that loop1 is now listed as a newly created\
    \ block device.\n\nCreate one more block device for this lab.\n\n```\ntruncate\
    \ -s 10g /tmp/myfile2.trunc\n```\n\n```\nlosetup /dev/loop2 /tmp/myfile2.trunc\n\
    ```\n\nCheck that the two devices are displayed.\n\n```\nlsblk\n```\n\n<pre class\
    \ =\"file\">\n NAME          MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT\n loop1     \
    \      7:1    0   10G  0 loop\n loop2           7:2    0   10G  0 loop\n\n<< OUTPUT\
    \ ABRIDGED >>\n</pre>\n\nYou should now see loop1 and loop2 devices reported in\
    \ the output of `lsblk`. These correspond to the two loopback device you configured\
    \ with the `losetup` command. When these block devices are written to, the data\
    \ will be stored in the /tmp/myfile1.trunc and /tmp/myfile2.truc files backing\
    \ these loopback block devices.\n"
  difficulty: basic
  slug: step3
  tabs:
  - hostname: rhel
    title: Terminal
    type: terminal
  - hostname: rhel
    path: /
    port: 9090
    title: RHEL Web Console
    type: service
  timelimit: 37
  title: Step 3
  type: challenge
- assignment: "# Create a pool\n\nA pool is a quantity of storage set aside by an\
    \ administrator. A Stratis pool is created from one or more block devices. All\
    \ pools must have a name; you can name the pool __my_pool__.\n\nCreate my_pool\
    \ from the block device that you just identified, /dev/loop1.\n\n```\nstratis\
    \ pool create my_pool /dev/loop1\n```\n\nIf you run blkid, you can see that /dev/loop1\
    \ is now in use and that its type is \"stratis\".\n\n```\nblkid\n```\n\n<pre class=\"\
    file\">\n\n << OUTPUT ABRIDGED >>\n \n /dev/loop1: UUID=\"e28d5230c62349ae954c73373ffaca50\"\
    \ POOL_UUID=\"f2dd9526bc2a4653a431f322ed85b0f5\" BLOCKDEV_SECTORS=\"20971520\"\
    \ BLOCKDEV_INITTIME=\"1588558543\" TYPE=\"stratis\"\n</pre>\n\nThe other loopback\
    \ device is not in use, and therefore is not listed.\n\n```\nstratis pool list\n\
    ```\n\n<pre class=\"file\">\nName                     Total Physical   Properties\n\
    my_pool   10 GiB / 37.63 MiB / 9.96 GiB      ~Ca,~Cr\n</pre>\n\nYou should see\
    \ my_pool listed.\n\n> **NOTE:** `stratis pool list` will provide you with a list\
    \ of any storage pools created on the system using stratis.\n\n"
  difficulty: basic
  slug: step4
  tabs:
  - hostname: rhel
    title: Terminal
    type: terminal
  - hostname: rhel
    path: /
    port: 9090
    title: RHEL Web Console
    type: service
  timelimit: 37
  title: Step 4
  type: challenge
- assignment: "# Add a block device to an existing pool\n\nAll pools contain a data\
    \ tier, which contains one or more block devices used to store data. The block\
    \ devices used to create the pool belong to the pool's data tier.\n\nYou can add\
    \ additional block devices to a pool as data devices, thereby increasing the disk\
    \ space provided to the Stratis pool. This is helpful when you have exhaused the\
    \ available space initially allocated to the pool.\n\nThe pool you created, my_pool,\
    \ has 10 GiB of space. Add /dev/loop2 as a data device to my_pool.\n\n```\nstratis\
    \ pool add-data my_pool /dev/loop2\n```\n\nNow list the pools.\n\n```\nstratis\
    \ pool list\n```\n\n<pre class=\"file\">\nName                      Total Physical\
    \   Properties\nmy_pool   20 GiB / 41.64 MiB / 19.96 GiB      ~Ca,~Cr\n</pre>\n\
    \nYou should see that my_pool now has a size of 20 GiB.\n\n# List block devices\n\
    \nNow that the pool consists of multiple block devices, it may be useful to find\
    \ out which block devices belong to which pools.\n\n```\nstratis blockdev list\n\
    ```\n\n<pre class=\"file\">\n Pool Name  Device Node  Physical Size  Tier\n my_pool\
    \    /dev/loop1          10 GiB  Data\n my_pool    /dev/loop2          10 GiB\
    \  Data\n</pre>\n\nYou can see that both /dev/loop1 and /dev/loop2 belong to my_pool.\n"
  difficulty: basic
  slug: step5
  tabs:
  - hostname: rhel
    title: Terminal
    type: terminal
  - hostname: rhel
    path: /
    port: 9090
    title: RHEL Web Console
    type: service
  timelimit: 37
  title: Step 5
  type: challenge
- assignment: "# Create a filesystem\n\nA filesystem is a hierarchy of directories\
    \ that is used to organize files on a storage media. Multiple Stratis filesystems\
    \ may be created from a pool. Like pools, all filesystems must have a name; you\
    \ can name the filesystem __my_first_fs__.\n\nCreate my_first_fs from the pool\
    \ that you created, my_pool.\n\n```\nstratis filesystem create my_pool my_first_fs\n\
    ```\n\n# List filesystems\n\nAt any point, you may list all existing Stratis filesystems.\n\
    \n```\nstratis filesystem list\n```\n\n<pre class=\"file\">\n Pool Name  Name\
    \         Used     Created            Device                        UUID\n my_pool\
    \    my_first_fs  546 MiB  May 07 2020 14:55  /stratis/my_pool/my_first_fs  e2688231488f40808507ede7502aad01\n\
    </pre>\n\nYou can see the new filesystem, my_first_fs, listed with the corresponding\
    \ pool and additional information.\n\n>**NOTE:** There is a shorter version of\
    \ the filesystem listing command: `stratis fs`\n\n```\nstratis fs\n```\n\n# Rename\
    \ a filesystem\n\nIt is possible to rename a filesystem. This may be useful for\
    \ a variety of reasons, such as updating the name of a test filesystem to a production\
    \ ready name.\n\nRename my_first_fs to a new name, my_fs.\n\n```\nstratis filesystem\
    \ rename my_pool my_first_fs my_fs\n```\n\nA filesystem list command will now\
    \ yield the filesystem with its new name:\n\n```\nstratis fs\n```\n\n<pre class=\"\
    file\">\n Pool Name  Name   Used     Created            Device               \
    \   UUID\n my_pool    my_fs  546 MiB  May 07 2020 14:55  /stratis/my_pool/my_fs\
    \  e2688231488f40808507ede7502aad01\n</pre>\n\nThe filesystem is now listed as\
    \ my_fs under the Name column.\n"
  difficulty: basic
  slug: step6
  tabs:
  - hostname: rhel
    title: Terminal
    type: terminal
  - hostname: rhel
    path: /
    port: 9090
    title: RHEL Web Console
    type: service
  timelimit: 37
  title: Step 6
  type: challenge
- assignment: "# Mount a filesystem\n\nMounting a filesystem means making the particular\
    \ filesystem accessible at a certain point in the Linux directory tree. Your filesystem\
    \ is unmounted, and cannot be used to store, read from, or write to files.\n\n\
    Choose a mount point, the directory in which the filesystem will be mounted. You\
    \ will mount the filesystem, my_fs, in the directory /mnt/test_mnt\n\n```\nmkdir\
    \ /mnt/test_mnt\n```\n\nMount the filesystem using the `mount` command.\n\n```\n\
    mount /dev/stratis/my_pool/my_fs /mnt/test_mnt\n```\n\nThe mount point, /mnt/test_mnt,\
    \ will now be the root directory of the filesystem.\n\n>__Warning:__ If you do\
    \ not choose an empty directory, the directory's previous contents will become\
    \ hidden until the filesystem is unmounted.\n\nConfirm that the filesystem has\
    \ been mounted by running the mount command.\n\n```\nmount\n```\n\n<pre class=\"\
    file\">\n << OUTPUT ABRIDGED >>\n\n /dev/mapper/stratis-1-ab995c9fa31e43a281322465a744c911-thin-fs-0f808d165a264b779cb9108f7176c098\
    \ on /mnt/test_mnt type xfs (rw,relatime,seclabel,attr2,inode64,sunit=2048,swidth=2048,noquota)\n\
    </pre>\n\nFrom the above output, you can see that the filesystem is now mounted\
    \ successfully in the /mnt/test_mnt directory.\n\n# Create files on mounted filesystem\n\
    \nCreate two empty files in the filesystem, my_fs.\n\n```\ntouch /mnt/test_mnt/my_first_file\n\
    ```\n\n```\ntouch /mnt/test_mnt/my_second_file\n```\n\nCheck that the files have\
    \ been created.\n\n```\nls /mnt/test_mnt\n```\n\n<pre class=\"file\">\n my_first_file\
    \  my_second_file\n</pre>\n\nBoth files are now accessible in the /mnt/test_mnt\
    \ directory.\n"
  difficulty: basic
  slug: step7
  tabs:
  - hostname: rhel
    title: Terminal
    type: terminal
  - hostname: rhel
    path: /
    port: 9090
    title: RHEL Web Console
    type: service
  timelimit: 37
  title: Step 7
  type: challenge
- assignment: "# Create a snapshot\n\nA snapshot of a filesystem is a read/writeable\
    \ thinly provisioned point in time copy of the source filesystem. To create a\
    \ snapshot, you will need the name of the pool in which the filesystem is located,\
    \ the name of the filesystem, and the name of the snapshot of the filesystem.\n\
    \nCreate a snapshot of the filesystem. Name the snapshot __my_snapshot__.\n\n\
    ```\nstratis filesystem snapshot my_pool my_fs my_snapshot\n```\n\nCheck that\
    \ the snapshot was created successfully by listing the stratis filesystems.\n\n\
    ```\nstratis fs\n```\n\n<pre class=\"file\">\n Pool Name  Name         Used  \
    \   Created            Device                        UUID\n my_pool    my_fs \
    \       546 MiB  May 08 2020 12:19  /stratis/my_pool/my_fs        0f808d165a264b779cb9108f7176c098\n\
    \ my_pool    my_snapshot  546 MiB  May 08 2020 12:29  /stratis/my_pool/my_snapshot\
    \  cf5ac541bb7440a9b1cf5b2ebe936f05\n</pre>\n\nYou should see my_snapshot listed\
    \ in the output.\n\n# Access the snapshot to recover files\n\nHere is an example\
    \ of how a snapshot can be used to recover deleted files from a filesystem.\n\n\
    Delete the first file that you created in the previous step.\n\n```\nrm -f /mnt/test_mnt/my_first_file\n\
    ```\n\nCheck that my_first_file has been deleted.\n\n```\nls /mnt/test_mnt\n```\n\
    \n<pre class=\"file\">\n my_second_file\n</pre>\n\nYou can see that my_first_file\
    \ has been removed from the directory, and only my_second_file remains.\n\nYou\
    \ can now mount the snapshot and get access to both files, since the snapshot\
    \ was created before the file was deleted.\nFirst, create a new mountpoint to\
    \ attach the snapshot into the filesystem, /mnt/test_mnt_snap.\n\n```\nmkdir /mnt/test_mnt_snap\n\
    ```\n\nNext, mount the snapshot, my_snapshot.\n\n```\nmount /dev/stratis/my_pool/my_snapshot\
    \ /mnt/test_mnt_snap\n```\n\nConfirm that the snapshot was mounted successfully.\n\
    \n```\nmount\n```\n\n<pre class=\"file\">\n << OUTPUT ABRIDGED >>\n /dev/mapper/stratis-1-ab995c9fa31e43a281322465a744c911-thin-fs-cf5ac541bb7440a9b1cf5b2ebe936f05\
    \ on /mnt/test_mnt_snap type xfs (rw,relatime,seclabel,attr2,inode64,sunit=2048,swidth=2048,noquota)\n\
    </pre>\n\nFrom the output above, the snapshot is mounted on /mnt/test_mnt_snap.\n\
    \nList the files stored within the snapshot on /mnt/test_mnt_snap.\n\n```\nls\
    \ /mnt/test_mnt_snap\n```\n\n<pre class=\"file\">\n my_first_file  my_second_file\n\
    </pre>\n\nBoth files are listed!\n\n# Copy the file back to the original filesystem\n\
    \nNow that you have access to the previously deleted file, my_first_file, you\
    \ may want to copy it back into the original filesystem, my_fs.\n\nTo do this,\
    \ copy the file, my_first_file back into the original filesytem.\n\n```\ncp /mnt/test_mnt_snap/my_first_file\
    \ /mnt/test_mnt\n```\n\nLastly, confirm that my_first_file has been copied to\
    \ /mnt/test_mnt.\n\n```\nls /mnt/test_mnt\n```\n\n<pre class=\"file\">\n my_first_file\
    \ my_second_file\n</pre>\n\nThe filesystem, my_fs, now contains the previously\
    \ deleted file, my_first_file.\n"
  difficulty: basic
  slug: step8
  tabs:
  - hostname: rhel
    title: Terminal
    type: terminal
  - hostname: rhel
    path: /
    port: 9090
    title: RHEL Web Console
    type: service
  timelimit: 37
  title: Step 8
  type: challenge
description: '# Overview:


  Stratis is a local storage-management solution for Linux that can assist with the
  initial configuration and ongoing management of storage. Stratis incorporates a
  simple and easy to use interface, while simultaneously providing the advanced capabilities
  of a volume managing filesystem.


  Stratis provides a variety of storage management features by integrating layers
  of existing technologies:

  * the device mapper framework

  * the XFS filesystem


  Stratis automates the management of local storage. On a system with just a single
  disk, Stratis can make it more convenient to logically separate /home from /usr,
  and enable snapshot with rollback on each separately. On larger configurations,
  Stratis can make it easier to create a multi-disk, multi-tiered storage pool, monitor
  the pool, and then manage the pool with less administrator effort.


  # Goal:


  After completing this scenario, users will be able to manage local storage with
  the Stratis CLI.


  # Concepts included in this scenario:


  * Installing, enabling, and starting Stratis

  * Locating empty block devices

  * Creating pools and filesystems

  * Adding block devices to an existing pool

  * Creating snapshots of a filesystem

  '
developers:
- rhel-tmm@redhat.com
icon: https://storage.googleapis.com/instruqt-frontend/img/tracks/default.png
level: beginner
owner: rhel
private: false
published: true
skipping_enabled: false
slug: stratis-configure
tags:
- rhel
title: Stratis, a new Red Hat Enterprise Linux storage technology
type: track
